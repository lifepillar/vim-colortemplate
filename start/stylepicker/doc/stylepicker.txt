*stylepicker.txt*	For Vim version 9.1	Last change: 2025 Apr 29

Author:  Lifepillar <https://github.com/lifepillar>
License: MIT

==============================================================================
CONTENTS					*stylepicker-contents*

	Requirements .............. |stylepicker-requirements|
	The style picker popup .... |stylepicker-popup|
	Customization ............. |stylepicker-customization|

==============================================================================
Requirements					*stylepicker-requirements*

StylePicker requires:

- Vim 9.1 or later (patches before 9.1.1128 may not be compatible) compiled
  with |+popupwin|, |+textprop| and other standard features.
- libcolor, libpath and libreactive from the vim-devel package
  (see https://github.com/lifepillar/vim-devel).
- Preferrably, support for true colors. The style picker, however, works with
  256 colors or even less.
- |ambiwidth| set to "single" (the default) unless ASCII mode is
  enabled (see |g:stylepicker_ascii|).
- (Optional) |mouse| set to "a" or "n" if you want to use the mouse.

==============================================================================
The style picker popup				*stylepicker-popup*

The style picker plugin allows you to modify a color scheme in real time. This
enables frictionless experimentation with color schemes directly within Vim.

The style picker can be opened with the |StylePicker| command or by invoking
|stylepicker#Open()|. Both the command and the function take the name of
a highlight group as an optional argument. When no argument is given, the
popup reflects the status of the highlight group under the cursor. Providing
a highlight group is necessary for editing highlight groups that are not
inside buffers, such as status lines.

If this is the first time you use the style picker, you may want to open it
now and try using it while reading this section. The stylepicker can be
dismissed at any time by clicking on the X at the top-right corner or by
pressing |x|. If you want to revert your changes by resetting the current
color scheme, press |X| instead.

NOTE: the stylepicker never persistently modifies a color scheme. You may use
a plugin such as Colortemplate to derive a color scheme from the highlight
group definitions currently in use.

The popup tries not to get too much in the way, but it intercepts several keys
(the keys that are not used by the style picker are passed to the underlying
buffer). To minimize interference with editing, the popup can be collapsed by
pressing |_| (underscore). In collapsed status, the only key that is filtered
by the style picker is the underscore, which expands the popup window again.
The popup can be collapsed and expanded also by double clicking on the top
line. In any case, all the keys can be customized: see
|g:stylepicker_keyaliases|.

The popup has a small "hamburger" symbol at the top-right, which can be used
to drag the style picker window with the mouse. The window is not resizable.

You may notice that the style picker uses several Unicode symbols. If you
prefer to use only ASCII characters, you may do so by setting
|g:stylepicker_ascii| to |true| before loading the plugin. If the plugin is
loaded, just type this in the command line:
>
	:call stylepicker#Set('ascii', 1)
<
The change will take effect immediately. StylePicker is highly configurable:
see |stylepicker-customization| for the list of all the available options.

The popup window consists of four panes: RGB, HSB, Grayscale, and Help, which
can be selected by typing |R|, |H|, |G|, and |?|, respectively, or by clicking
on the name of the desired pane in the footer:
>
	◀ Rgb Hsb Gray ?Help ▶
<
All color chooser panes have a header, which shows some properties of the
currently selected highlight group along with its name:
>
	BIUVSK [fg] String
<
The six letters indicate the most common style attributes that can be applied
to a highlight group: [B]old, [I]talic, [U]nderline (in various forms),
in[V]erse, [S]tandout, and stri[K]ethrough. If the highlight group has some of
those attributes, the corresponding letter is highlighted. You may type one of
those letters to toggle the corresponding attribute. You may also click on the
letters for the same purpose.

Next to the style attributes, `[fg]` indicates that the current color is for
the foreground of the highlight group. You may switch to background color
(`[bg]`) and special color (`[sp]`) by pressing |Tab| or |S-Tab|, or by
clicking on the header between the square brackets.

Below the header, several other components are present, some of which can be
selected using up and down arrow keys. The currently selected item has
a `❯❯` marker on the side (or `>>` in ASCII mode). For instance:
>
	❯❯ R 149 ███████████████████▎
	   G 199 █████████████████████████▊
	   B 111 ██████████████▍
	Step  01
<
When the marker is next to a slider, the corresponding value can be changed
with the left and right arrow keys. A slider can also be dragged with the
mouse regardless of the marker's position. Changes are applied immediately.

The amount by which a slider is changed by the arrow keys can be set by simply
typing a number between 1 and 99 while the marker is on any slider. The
current step is shown below the sliders. When the marker is elsewhere, the
numbers you type are passed to the underlying buffer.

With the marker on any slider, typing {register}|Y| will copy the current
color to a register. Conversely, if a register contains a valid hexadecimal
color value, that can be pasted into the style picker with {register}|P|.
Clicking on the color info section (see below) will also allow you to yank
a color value.

Pressing |E| allows you to manually specify a new color. If the environment
supports millions of colors, you will be asked to enter a hexadecimal color
value: if the value has one, two, or three characters, it will be
automatically expanded to the corresponding six character version (for
instance, `#cd` will be interpreted as `#cdcdcd`). If the environment does not
support true colors, you will be asked to enter a new terminal color, that is,
a value between 16 and 255. To clear a color (that is, to set it to `NONE`),
press |Z|.

To choose a specific highlight group, press |N| or click on the highlight
group name in the header. Note that, as soon as you choose a color this way,
the style picker stops tracking the cursor. You may toggle cursor tracking on
and off at any time by pressing |T|.

In the middle of a color pane, some information is displayed about the current
color. It looks like this:
>
	███ ███ 849cce ★★    110/87afd7 ★★★   Δ7.0
<
This line shows the hex value of the color (`#849cce`), its best terminal
approximation (`110`, with `#87afd7` being the equivalent hex value from
a conventional Xterm palette), and a number expressing the color difference
between the GUI and terminal color (`7.0`), which is based on the CIELAB ΔE*
metric. Intuitively, the greater the value the larger the discrepancy between
a color and its xterm approximation.

On the left, two color swaths display the GUI color (left) and its xterm
approximation (right) side by side. An exclamation mark will appear if the
corresponding color is not guaranteed to match the way the highlight group
actually appears. If, for example, the highlight group lacks the guifg
attribute then the foreground color must be guessed. Also, if the ctermfg
attribute is not equal to the best approximation of the guifg attribute then
the style picker will put an exclamation mark on the xterm approximation.

If your terminal does not support true colors, the left swath will necessarily
be an approximation of the true color value, so it will not be very useful.

You may click on a color value or on a swath to copy the corresponding color.
You may type the name of a register before clicking to yank into a specific
register.

The stars, or asterisks, provide a qualitative assessment of the quality of
the GUI color and terminal color, respectively, against the background of the
current highlight group (when the background color is active, the foreground
of the highlight group is used for comparison). A color can have up to five
stars, according to how many of the following tests it passes:

- the contrast ratio (CR) between the (foreground/special) color and the
  background is >=3.0;
- CR >= 4.5;
- CR >= 7.0;
- the color difference between the color and the background is >=500;
- the brightness difference between the color and the background is >=125.

The thresholds are based on W3C guidelines, where you may also find the
definitions of the terms above:

    https://www.w3.org/TR/AERT/
    https://www.w3.org/TR/2008/REC-WCAG20-20081211/

Generally speaking, for a color scheme to have good legibility, even for
people with color deficits, you should aim at getting at least two/three stars
for each highlight group and at least four/five for the |Normal| group. But
use this guideline with a grain of salt: if you are developing a low-contrast
color scheme for your programming night sessions, your colors will most likely
get zero or one star. That does not necessarily make your color scheme
“bad”—just one that can be used subject to some constraints (low-light
conditions and visually unimpaired users).

As you modify highlight groups, the style picker remembers the twenty most
recently used colors (the number is configurable, of course). With the marker
somewhere in the Recent Colors section, you may press |Enter| to select
a recent color, |D| to remove a color from the list, or {register}|Y| to yank
a recent color. Each of those keys will cause a prompt to ask you to pick
a color by typing a number between 0 and 9:
>
	Recent Colors
	    ⁰   ¹   ²   ³   ⁴   ⁵   ⁶   ⁷   ⁸   ⁹
	❯❯ ███ ███ ███ ███ ███ ███ ███ ███ ███ ███
	    ⁰   ¹   ²   ³
	   ███ ███ ███ ███
<
When you press |A|, regardless of the marker's position the current color is
added to the Favorite Colors palette unless it is already there. You may
choose, delete or yank a favorite color in the same way as for recent colors.

Clicking on a color swath in either palette will also make it the active
color.

Both palettes are remembered if you close and then reopen the style picker
during the same Vim session. But to make them persist across sessions, you
must specify a location where they can be saved. For details, see
|g:stylepicker_recentpath| and |g:stylepicker_favoritepath|. The saved files
are just text files with one color per line; they can be easily edited by hand
if desired.

==============================================================================
Customization				*stylepicker-customization*

The style picker can be customized by defining global variables or by using
a couple of functions. The global variables must be defined before the script
is loaded: use them in your `vimrc` to set your preferred settings. The
functions can be invoked in scripts or on the command-line to dynamically
configure the style picker after it has been loaded.

					*stylepicker.Set()*
Set({option}, {value})
		Set the option called {option} to the given {value}. In most
		cases, the change will have an immediate effect. To use on the
		command line, replace . with #, and false/true with 0/1. For
		example:
>
		:call stylepicker#Set('marker', '==> ')
<
		{option} is the name of a global option with the
		"g:stylepicker_" prefix removed.

					*stylepicker.Settings()*
Settings([{options}])
		Set multiple options at once. {options} is a dictionary
		whose keys are options' names (as in |stylepicker.Set()|).
>
		:call stylepicker#Settings({ascii: 1, 'asciimarker': '> '})
<
		Returns a dictionary of all settings. You may invoke it
		without arguments to get the current values of all the
		options:
>
		:echo stylepicker#Settings()
<
					*g:stylepicker_allowkeymapping*
Allow for key mapping. See "mapping" in |popup_create-arguments|.
>
	g:stylepicker_allowkeymapping = true
<
					*g:stylepicker_ascii*
Whether the style picker should be limited to ASCII.
>
	g:stylepicker_ascii = false
<
					*g:stylepicker_asciiborderchars*
					*g:stylepicker_asciidigitchars*
					*g:stylepicker_asciidragsymbol*
					*g:stylepicker_asciileftsymbol*
					*g:stylepicker_asciimarker*
					*g:stylepicker_asciirightsymbol*
					*g:stylepicker_asciislidersymbols*
					*g:stylepicker_asciistar*
Same as the correponding options without “ascii”, but they apply when
|g:stylepicker_ascii| is set.

					*g:stylepicker_borderchars*
The characters defining the border of the stylepicker. This must be a list
with eight items, defining the characters to use for the top/right/bottom/left
border, followed by the characters to use for the
topleft/topright/botright/botleft corner.
>
	g:stylepicker_borderchars = ['─', '│', '─', '│', '╭', '╮', '╯', '╰']
<
					*g:stylepicker_debug*
Show debugging information at the bottom of the stylepicker.
>
	g:stylepicker_debug = false
<
					*g:stylepicker_digitchars*
The ten digits to use in the color palettes.
>
	g:stylepicker_digitchars = [
	    '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹',
	]
<
					*g:stylepicker_dragsymbol*
The character to use as the drag icon.
>
	g:stylepicker_dragsymbol = '𝌆'
<
					*g:stylepicker_favoritepath*
The path to a file where favorite colors should be saved. This is unspecified
by default, which means that favorite colors are lost when Vim is closed.

Note: if the path is relative, it is considered relative to the current
working directory. Use an absolute path to avoid ambiguities.
>
	g:stylepicker_favoritepath = ''
<
					*g:stylepicker_highlight*
Highlight group name to use for the stylepicker's normal foreground and
background color. See "highlight" in |popup_create-arguments|. For this
setting to take effect, the style picker must be closed and reopened.
>
	g:stylepicker_highlight = 'Normal'
<
					*g:stylepicker_keyaliases*
Map from user defined key codes to StylePicker's default keys. Use this to set
your own mappings for the various actions in the style picker.
>
	g:stylepicker_keyaliases = {}
<
For instance, to make |h| and |l| perform the actions of left and arrow keys:
>
	let g:stylepicker_keyaliases {
	  "h": "\<left>",
	  "l": "\<right>",
	}
<
					*g:stylepicker_leftsymbol*
The symbol to use as the icon to move to the previous pane.
>
	g:stylepicker_leftsymbol = '◀︎'
<
					*g:stylepicker_marker*
The marker's text.
>
	g:stylepicker_marker = '❯❯ '
<
					*g:stylepicker_minwidth*
The minimum width of the popup. This is mainly useful to set the width of the
style picker when collapsed. See "minwidth" in |popup_create-arguments|.
>
	g:stylepicker_minwidth = 15
<
					*g:stylepicker_numrecent*
Number of recent colors to remember. 
>
	g:stylepicker_numrecent = 20
<
					*g:stylepicker_quotes*
List of quotations to show in the style picker. Every time the style picker is
reopened, a quotation is randomly chosen for each pane from this list. Each
quotation should be at most 42 characters long.

					*g:stylepicker_recentpath*
Same as |g:stylepicker_favoritepath|, but for the Recent Colors palette.
>
	g:stylepicker_recentpath = ''
<
					*g:stylepicker_rightsymbol*
The symbol to use as the icon to move to the next pane.
>
	g:stylepicker_rightsymbol = '▶︎'
<
					*g:stylepicker_star*
The symbol to use for stars.
>
	g:stylepicker_star = '★'
<
					*g:stylepicker_stepdelay*
The maximum delay between two digit key presses to consider them consecutive.
Expressed in seconds, can be fractional.
>
	g:stylepicker_stepdelay = 1.0
<
					*g:stylepicker_zindex*
Priority of the popup. See "zindex" in |popup_create-arguments|.
>
	g:stylepicker_zindex = 50
<

 vim:tw=78:ts=8:noet:ft=help:norl:
