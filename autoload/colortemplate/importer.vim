vim9script

import 'librelalg.vim'     as ra
import 'libcolor.vim'      as libcolor
import '../../import/colortemplate/colorscheme.vim'        as colorscheme
import '../../import/colortemplate/generator/template.vim' as generator
import '../../import/colortemplate/generator/base.vim'     as base

const KEY_NOT_FOUND     = ra.KEY_NOT_FOUND
const Extend            = ra.Extend
const EquiJoin          = ra.EquiJoin
const Int               = ra.Int
const Max               = ra.Max
const Select            = ra.Select
const Sort              = ra.Sort
const SortBy            = ra.SortBy
const Str               = ra.Str
const Transform         = ra.Transform
type  Rel               = ra.Rel

const ANSI_HEX          = libcolor.ANSI_HEX
const Approximate       = libcolor.Approximate
const CtermColorNumber  = libcolor.CtermColorNumber
const Cterm2Hex         = libcolor.Cterm2Hex
const CtermName2Hex     = libcolor.CtermName2Hex
const ColorNumber2Hex   = libcolor.ColorNumber2Hex
const RgbName2Hex       = libcolor.RgbName2Hex
const Xterm2Hex         = libcolor.Xterm2Hex

type  Colorscheme       = colorscheme.Colorscheme
type  Database          = colorscheme.Database

type  IGenerator        = base.IGenerator
type  Generator         = generator.Generator

const ADJECTIVES = [
  'bald',
  'bold',
  'busy',
  'calm',
  'cool',
  'cute',
  'dead',
  'drab',
  'dull',
  'dumb',
  'easy',
  'evil',
  'fair',
  'fine',
  'free',
  'glad',
  'glum',
  'good',
  'hurt',
  'kind',
  'lazy',
  'long',
  'nice',
  'open',
  'pale',
  'poor',
  'real',
  'rich',
  'sore',
  'sour',
  'tame',
  'ugly',
  'vast',
  'warm',
  'weak',
  'wild',
  'zany',
]

const ANIMALS = [
  'Akita',
  'Bison',
  'Bongo',
  'Booby',
  'Camel',
  'Coati',
  'Coral',
  'Crane',
  'Dhole',
  'Dingo',
  'Eagle',
  'Fossa',
  'Gecko',
  'Goose',
  'Guppy',
  'Heron',
  'Horse',
  'Human',
  'Hyena',
  'Indri',
  'Koala',
  'Lemur',
  'Liger',
  'Llama',
  'Macaw',
  'Molly',
  'Moose',
  'Mouse',
  'Okapi',
  'Otter',
  'Prawn',
  'Quail',
  'Quoll',
  'Robin',
  'Saola',
  'Sheep',
  'Skunk',
  'Sloth',
  'Snail',
  'Snake',
  'Squid',
  'Stoat',
  'Tapir',
  'Tetra',
  'Tiger',
  'Xerus',
  'Zebra',
  'Zorse',
]

def FancyNames(): list<string>
  var fancyNames: list<string> = []

  for adjective in ADJECTIVES
    for animal in ANIMALS
      fancyNames->add(adjective .. animal)
    endfor
  endfor

  return fancyNames
enddef

def Fatal(t: string)
  echohl Error
  echomsg '[Colortemplate]' t .. '.'
  echohl None
  interrupt()
enddef

def Shuffle(x: list<string>): list<string>
  for i in reverse(range(len(x) - 1))
    var j = rand() % (i + 1)
    var t = x[i]
    x[i]  = x[j]
    x[j]  = t
  endfor

  return x
enddef

class NameGenerator
  var _db: Database
  var _fancyNames: list<string>
  var _n = 0

  def new(db: Database)
    this._db         = db
    this._fancyNames = Shuffle(FancyNames())
  enddef

  def GetName(guiValue: string, ctermValue: string): string
    var t = this._db.Color.Lookup(['GUI', 'Base256', 'Base16'], [guiValue, ctermValue, ''])

    if t is KEY_NOT_FOUND
      var name = this.NextColorName()

      t = {Name: name, GUI: guiValue, Base256: ctermValue, Base256Hex: '', Base16: ''}

      this._db.Color.Insert(t)
    endif

    return t.Name
  enddef

  def NextColorName(): string
    ++this._n

    if get(g:, 'colortemplate_fancy_import', true)
      if this._n <= len(this._fancyNames)
        return this._fancyNames[this._n - 1]
      endif

      Fatal('Too many colors. Try setting g:colortemplate_fancy_import to false')
    endif

    return 'Color' .. repeat('0', float2nr(4 - log10(this._n + 1))) .. this._n
  enddef
endclass

# Return a hex color value or an empty string
def Cterm2Gui(ctermValue: string): string
  if empty(ctermValue)
    return ''
  endif

  if ctermValue =~ '^\d\+$'
    return ColorNumber2Hex(str2nr(ctermValue))
  endif

  var nr = CtermColorNumber(ctermValue, 16)

  return get(ANSI_HEX, nr, '')
enddef

class Importer
  var theme:         Colorscheme
  var background:    string
  var nameGenerator: NameGenerator

  def new()
    this.theme                              = Colorscheme.new()
    this.background                         = &background
    this.theme.backgrounds[this.background] = true
    this.theme.fullname                     = get(g:, 'colors_name', '')
    this.theme.shortname                    = get(g:, 'colors_name', '')
    this.theme.authors->add('Autogenerated')
    this.theme.environments                 = ['gui', '256', '0']
    this.nameGenerator                      = NameGenerator.new(this.theme.Db(this.background))
  enddef

  # Collect information about the currently active highlight groups
  def Collect()
    var db = this.theme.Db(this.background)
    var higroups = hlget()

    for higroup in higroups
      var hiGroupName = higroup['name']

      if get(higroup, 'cleared', false)
        continue
      endif

      if !empty(get(higroup, 'linksto', ''))
        db.InsertLinkedGroup('default', '', '', hiGroupName, higroup['linksto'])
        continue
      endif

      # Base group
      var guifg   = get(higroup, 'guifg', Cterm2Gui(get(higroup, 'ctermfg', '')))
      var guibg   = get(higroup, 'guibg', Cterm2Gui(get(higroup, 'ctermbg', '')))
      var guisp   = get(higroup, 'guisp', Cterm2Gui(get(higroup, 'ctermul', '')))
      var ctermfg = get(higroup, 'ctermfg', empty(guifg) ? '' : string(Approximate(guifg).xterm))
      var ctermbg = get(higroup, 'ctermbg', empty(guibg) ? '' : string(Approximate(guibg).xterm))
      var ctermul = get(higroup, 'ctermul', empty(guisp) ? '' : string(Approximate(guisp).xterm))
      var gui     = get(higroup, 'gui',   {})
      var cterm   = get(higroup, 'cterm', {})
      var term    = get(higroup, 'term',  {})

      var fgColorName = ''
      var bgColorName = ''
      var spColorName = ''

      if !empty(guifg)
        fgColorName = this.nameGenerator.GetName(guifg, ctermfg)
      endif

      if !empty(guibg)
        bgColorName = this.nameGenerator.GetName(guibg, ctermbg)
      endif

      if !empty(guisp)
        spColorName = this.nameGenerator.GetName(guisp, ctermul)
      endif

        db.InsertBaseGroup(
          'default', # Environment
          '',        # DiscrName
          '',        # DiscrValue
          hiGroupName,
          fgColorName,
          bgColorName,
          spColorName,
          join(keys(gui), ',')
        )

        if cterm != gui
          db.InsertBaseGroup(
            '256',
            '',
            '',
            hiGroupName,
            fgColorName,
            bgColorName,
            spColorName,
            join(keys(cterm), ',')
          )
        endif

        if term != gui
          db.InsertBaseGroup(
            '0',
            '',
            '',
            hiGroupName,
            '',
            '',
            '',
            join(keys(term), ',')
          )
        endif
    endfor

    # Retrieve terminal ANSI colors
    for hex in get(g:, 'terminal_ansi_colors', [])
      var colorName = this.nameGenerator.GetName(hex, string(Approximate(hex).xterm))

      db.termcolors->add(colorName)
    endfor
  enddef
endclass

export def Import()
  var importer = Importer.new()
  importer.Collect()
  new
  setlocal ft=colortemplate
  var templateGenerator: IGenerator = Generator.new()
  var theme: Colorscheme = importer.theme
  var template = templateGenerator.Generate(theme)
  append(0, template)
enddef
