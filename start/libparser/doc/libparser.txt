*libparser.txt*	For Vim version 9.0	Last change: 2024 Jan 07

A library to write simple parsers.

Note: Vim 9.0.2185 or later is required.

0. Quick start				|libparser-quickstart|
1. Tutorial				|libparser-tutorial|
2. Basic parsers			|libparser-basic|
3. Parser generators			|libparser-generators|
4. Parser combinators			|libparser-combinators|
5. Other functions			|libparser-other-functions|
6. Classes				|libparser-classes|

==============================================================================
0. Quick start					*libparser-quickstart*

The following code parses the string "Vim" at the beginning of a given text:
>
	vim9script
	import 'libparser.vim' as parser

	var ctx      = parser.Context.new("Vim - the ubiquitous text editor")
	const Parse  = parser.Text("Vim")
	const result = Parse(ctx)

	echo result.success  # true
	echo result.value    # "Vim"
	echo ctx.index       # 3
<
To parse some text, at a minimum you have to define a "context" object with
two pieces of information:

- the |string| to be parsed;
- the byte position (or "index") in the text where parsing should start (which
  is zero by default).

The text to be parsed is considered immutable and never changed by a parser;
the index, however, is updated as parsing proceeds to always point at the next
character yet to be parsed.

A parser is a function func(|libparser.Context|): |libparser.Result| that
receives as input a context, and returns a result object with the following
fields:

- "success": a Boolean flag telling whether parsing was successful or not;
- "value": the parsed value in case of successful parsing (otherwise, |null|);
- "errpos": the position of an error in case of failure (otherwise, -1);
- "label": a message explaining what the parser expected, in case of error
  (otherwise, an empty string).

When a parser succeeds consuming some input, the context's index is advanced
to the next position in the text that needs to be parsed.

When a parser fails, it never consumes any input, that is, the context's index
is not modified. If the failure object is "unlabelled", that is, its label
field is an empty string, then parsing continues with backtracking (this is
a "normal", or "backtracking", failure). If the failure object is "labelled",
that is, its label is not empty, then then failure is considered a true syntax
error and parsing stops. Any parser can be transformed into a "labelled"
parser using |libparser.Lab()|.

==============================================================================
1. Tutorial					*libparser-tutorial*

Let us consider the following grammar for arithmetic expressions:

Exp     ::= RelExp (EQ RelExp)*
RelExp  ::= AddExp (LT AddExp)*
AddExp  ::= MulExp ((PLUS | MINUS) MulExp)*
MulExp  ::= AtomExp ((TIMES | DIV) AtomExp)*
AtomExp ::= LPAR Exp RPAR | NUMBER | NAME

Terminal symbols are in all uppercase and non-terminals are camel-cased. The
vertical bar | denotes ordered choice, and * is repetition.

This grammar can be translated into Vim 9 script as follows:
>
	vim9script

	import 'libparser.vim' as parser

	type  Context = parser.Context
	type  Result  = parser.Result

	const Eof     = parser.Eof
	const Lab     = parser.Lab
	const Many    = parser.Many
	const OneOf   = parser.OneOf
	const Seq     = parser.Seq
	const R       = parser.RegexToken(parser.Blank)
	const T       = parser.TextToken(parser.Blank)


	const DIV      = T('/')
	const EQ       = T('=')
	const LPAR     = T('(')
	const LT       = T('<')
	const MINUS    = T('-')
	const NAME     = R('\w\+')
	const NUMBER   = R('\d\+')
	const PLUS     = T('+')
	const RPAR     = T(')')
	const TIMES    = T('*')

	def Ref(name: string): func(Context): Result
	  return (ctx: Context): Result => {
	    return eval(name)(ctx)
	  }
	enddef

	const AtomExp  = OneOf(Seq(LPAR, Ref('Exp'), RPAR), NUMBER, NAME)
	const MulExp   = Seq(AtomExp, Many(Seq(OneOf(TIMES, DIV), AtomExp)))
	const AddExp   = Seq(MulExp, Many(Seq(OneOf(PLUS, MINUS), MulExp)))
	const RelExp   = Seq(AddExp, Many(Seq(LT, AddExp)))
	const Exp      = Seq(RelExp, Many(Seq(EQ, RelExp)))
	const ParseExp = Seq(Exp, Eof)
<
The translation is straightforward enough, except for a couple of details,
explained below. Each terminal symbol is a parser defined using one of two
functions `T()` and `R()`: `T()` is a parser that matches a given string
literally; `R()` is a parser that matches a given regular expression. Those
parsers are defined so that whitespace is skipped automatically. See
|libparser.TextToken()| and |libparser.RegexToken()| for the details.

Each operator corresponds to a "parser combinator", which is a function that
takes as input one or more parsers and returns another parser. The
combinators used in this example are:

- |libparser.OneOf()| for ordered choice;
- |libparser.Seq()| for sequential composition;
- |libparser.Many()| for repetition.

The implementation of the grammar differs from its specification mainly in two
respects: first, the rules are given in reversed order with respect to the
"natural" presentation order of the formal grammar. This is because each
symbol must be defined before it can be used in another rule. Second, when
this is not possible due to the recursive nature of some rules, a "trick" must
be used: a function must be defined that allows a rule to refer to a symbol
that has not been declared yet. This is the purpose of the `Ref()` function
above. Unfortunately, `Ref()` cannot be defined by the library, because
|eval()| is evaluated in the script context where it appears. You may just
copy and paste the `Ref()` function above in your scripts if you need it.

Another minor difference is that a `ParseExp` rule has been added to make sure
that a string is parsed from beginning to end (as opposed to just parsing
a prefix of a string): |libparser.Eof()| is a parser that matches only at the
end of a string.

A nice feature of this type of parsers is that each identifier denotes
a complete parser by itself. This makes it very easy to test each parser
separately (a bit less trivially in this example, due to the recursive rules).
For instance:
>
	echo NAME(Context.new('xyz ...')).value    # "xyz"
	echo NUMBER(Context.new('123 ...')).value  # "123"
	echo AtomExp(Context.new('42 * 36')).value # "42"
<
Let us now define a function to parse some expressions:
>
	def Parse(e: string): Result
	  var ctx = Context.new(e)
	  const result = ParseExp(ctx)

	  if result.success
	    echo result.value
	  else
	    echo strpart(e, 0, 1 + result.errpos) .. '<==='

	    if !empty(result.label)
	      echo printf('Expected %s at position %d',
	                   result.label, result.errpos)
	    endif
	  endif

	  return result
	enddef
<
This function should be easy to understand if you have read
|libparser-quickstart|. In case of success, the parsed value is printed. In
case of failure, the parsed text is printed up to the point of failure. If an
error label exists, that is printed, too.

Let us apply the function to recognize a few expressions:
>
	const exp1 = '3 * (12 / 4) - 1'
	const exp2 = '(x + 5) < 7'
	const exp3 = '5 * foo = )42'

	Parse(exp1)
	Parse(exp2)
	Parse(exp3)
<
The first two expressions are parsed successfully, and the third one returns
an error at position 8:
>
	5 * foo =<===
<
Unfortunately, no error message is provided, and the position is not very
accurate either: one would have expected an error to be reported at position
10, where the spurious right parenthesis appears. But, as a first
approximation, this is better than nothing.

To report sensible errors you must annotate with a label each (terminal or
non-terminal) symbol that should not return a backtracking failure. In
practice, in most cases that means that each symbol in the right-hand side of
a production should be annotated, except for:

- the very first symbol in the right-hand side of the production;
- the first symbol in each nested subexpression that is a choice or
  a repetition.

For instance, in this rule:

Exp ::= RelExp (EQ RelExp)*

only the second RelExp needs to be annotated (the first RelExp is the first
symbol of the production, and EQ is the first symbol in the repetition). In
Vim 9 script, |libparser.Lab()| is used for such annotations:
>
	const Exp = Seq(RelExp, Many(Seq(EQ, Lab(RelExp, 'rhs of equality'))))
<
After replacing the original `Exp` rule with the rule above, the parser
reports a much better error for `exp3`:
>
	5 * foo = )<===
	Expected rhs of equality at position 10
<
The complete annotated grammar, following the annotation strategy described
above, looks as follows:
>
	const AtomExp  = OneOf(
	                   Seq(
	                     LPAR,
	                     Lab(Ref('Exp'), 'expr in parentheses'),
	                     Lab(RPAR,       'closed parenthesis')
	                   ),
	                   NUMBER,
	                   NAME)

	const MulExp   = Seq(
	                   AtomExp,
	                   Many(Seq(
	                          OneOf(TIMES, DIV),
	                          Lab(AtomExp, 'rhs of * or /'))))

	const AddExp   = Seq(
	                   MulExp,
	                   Many(Seq(
	                          OneOf(PLUS, MINUS),
	                          Lab(MulExp,  'rhs of + or -'))))

	const RelExp   = Seq(
	                   AddExp,
	                   Many(Seq(
	                          LT,
	                          Lab(AddExp,  'rhs of <'))))

	const Exp      = Seq(
	                   RelExp,
	                   Many(Seq(
	                          EQ,
	                          Lab(RelExp,  'rhs of equality'))))

	const ParseExp = Seq(
	                   Exp,
	                   Lab(Eof, 'end of input'))
<
So far, we have written code to recognize well-formed expressions. But
probably we also want to evaluate them. This is typically done by appending
semantic actions to some rules, using |libparser.Map()| or
|libparser.Apply()|, in order to process the parsed text. For this example,
the evaluation may be done when the whole expression has been parsed, so we
update the `ParseExp` rule:
>
	const ParseExp = Seq(
	                   Exp,
	                   Lab(Eof, 'end of input'))
	                 ->Map((v, _) => eval(join(flattennew(v))))
<
This is enough to evaluate numerical expressions, such as `exp1`:
>
	const exp1 = '3 * (12 / 4) - 1'
	Parse(exp1)  # 8
<
To evaluate expressions with variables, a value must be assigned to such
variables, which is normally done by maintaining a lookup table. The context's
`state` dictionary is a good place to put such lookup tables (see
|libparser.Context|). Since the grammar of the running example does not define
assignment rules, to keep the example simple we pre-populate the state after
initializing the context:
>
	def Parse(e: string): Result
	  var ctx = Context.new(e)
	  ctx.state = {x: 42, foo: 0}
	  const result = ParseExp(ctx)
	  # The rest of the functions is defined as before
<
Then, the `AtomExp` rule can be updated as follows:
>
	const AtomExp  = OneOf(
	                   Seq(
	                     LPAR,
	                     Lab(Ref('Exp'), 'expression in parentheses'),
	                     Lab(RPAR, 'closed parenthesis')),
	                   NUMBER,
	                   NAME->Map((v, c: Context): number => c.state[v])
	                      )
<
Now, `exp2` can be evaluated, too:
>
	const exp2 = '(x + 5) < 7'
	Parse(exp2)  # false
<
==============================================================================
2. Basic parsers				*libparser-basic*

Blank({ctx})					*libparser.Blank()*
		A parser that matches optional whitespace, including newlines.
		This parser is equivalent to Opt(Space). For example:
>
		var ctx = Context.new('   abc', 0)
		var result = Blank(ctx)

		echo result.success
		echo "Value: '" .. result.value .. "'"
		echo "Index:" ctx.index

		result = Blank(ctx)

		echo result.success
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: '   '
		Index: 3

		true
		Index: 3
<
		See also |libparser.Space()| and |libparser.Opt()|.

Bol({ctx})					*libparser.Bol()*
		A parser that matches at the beginning of a line without
		consuming any input. The parsed value is always |null|. For
		example:
>
		var ctx = Context.new("X\nY", 2)
		var result = Bol(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Current index:" ctx.index
<
		Output:
>
		true
		Value: null
		Current index: 2
<
Eol({ctx})					*libparser.Eol()*
		A parser that matches an end-of-line character. The returned
		value is the actual new line character (`\n` or `\r`). For
		example:
>
		var ctx = Context.new("\nX", 0)
		var result = Eol(ctx)

		echo result.success
		echo "Value:" char2nr(result.value)
		echo "Current index:" ctx.index
<
		Output:
>
		true
		Value: 10
		Current index: 1
<
Eof({ctx})					*libparser.Eof()*
		A parser that matches at the end of the text without consuming
		any input. The returned value upon success is |null|. For
		example:
>
		var ctx = Context.new("abc", 0)
		var result = Eof(ctx)
		echo result.success "Error at pos." result.errpos

		ctx.index = 3
		result = Eof(ctx)
		echo result.success "Value:" result.value
<
		Output:
>
		false Error at pos. 0
		true Value: null
<
Eps({ctx})					*libparser.Eps()*
		A parser that matches an empty string and never fails. The
		returned value is an empty string. For example:
>
		var ctx = Context.new("abc", 2)
		const result = Eps(ctx)

		echo result.success
		echo "Value: '" .. result.value .. "'"
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ''
		Index: 2
<
SoftFail({ctx})					*libparser.SoftFail()*
		A parser that does nothing and always fails, allowing
		backtracking.

		In the following example, the first choice fails
		unconditionally, so the parser backtracks and always tries the
		second choice, which in this case succeeds:
>
		var ctx = Context.new("abc", 0)
		const Parse = OneOf(SoftFail, Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ab
		Index: 2
<
Null({ctx})					*libparser.Null()*
		A parser that does nothing and never fails. The returned value
		is |null|. For example:
>
		var ctx = Context.new("abc", 0)
		const result = Null(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: null
		Index: 0
<
Space({ctx})					*libparser.Space()*
		A parser that matches non-empty whitespace, including
		newlines. For example:
>
		var ctx = Context.new('   abc', 0)
		var result = Space(ctx)

		echo result.success
		echo "Value: '" .. result.value .. "'"
		echo "Index:" ctx.index

		result = Space(ctx)

		echo result.success
<
		Output:
>
		true
		Value: '   '
		Index: 3

		false
<
		See also |libparser.Blank()|.

==============================================================================
3. Parser generators				*libparser-generators*

Parser generators are functions that build and return a parser.

Call({func})					*libparser.Call()*
		Return a parser that calls {func} and always succeeds. The
		parsed value is always |null|. {func} is a function that takes
		no arguments and returns no value. This parser generator can
		be used for side effects that do not depend on the parsed
		value or on the parser's context. For examples:
>
		def Start()
		    echo 'Parsing started...'
		enddef

		def Stop()
		    echo 'Finished!'
		enddef

		def Consume(value: string, _: Context)
		    echo "Parsed value:" value
		enddef

		var ctx = Context.new('abc')
		const Parse = Seq(
		    Call(Start),
		    Text('ab')->Apply(Consume),
		    Call(Stop)
		)
		const result = Parse(ctx)
<
		Output:
>
		Parsing started...
		Parsed value: ab
		Finished!
<
		Note that |libparser.Apply()| or |libparser.Map()| should be
		used if the parsed value and/or the context must be made
		available to the called function.

Fail({msg})					*libparser.Fail()*
		Return a parser that always fails with a failure labelled by
		{msg}, preventing backtracking. This parser is equivalent to
		Lab(SoftFail, {msg}). For example, this parser never succeeds:
>
		var ctx = Context.new('abc', 0)
		const Parse = OneOf(Fail('@#$!'), Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: @#$!
		Errpos: 0
		Index: 0
<
Regex({pat})					*libparser.Regex()*
		Return a parser that matches regular expression {pat}. Pattern
		matching follows the rules of |match()|.
>
		var ctx = Context.new('aaaabc', 0)
		const Parse = Regex('a\+')
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: aaaa
		Index: 4

Text({string})					*libparser.Text()*
		Return a parser that matches {string} case-sensitively. Note:
		for case-insensitive match, use |libparser.Regex()| with |\c|.
>
		var ctx = Context.new('ab  c', 0)
		const Parse = Text('ab')
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ab
		Index: 2
<
==============================================================================
4. Parser combinators				*libparser-combinators*

Parser combinators are functions that take as input one or more parsers, and
build and return a new parser.

Apply({parser}, {func})				*libparser.Apply()*
		Apply {parser} and, upon success, consume the parsed value by
		applying a function {func}. The value of this parser is always
		|null|. {func} receives two arguments: the first is the value
		parsed by {parser}, and the second is the current
		|libparser.Context|. The function must not return anything. If
		the function raises an error, then the parser returns
		a failure labelled with the raised exception.

		Example:
>
		def StoreNumber(value: string, context: Context)
		    ctx.state.storedNumber = str2nr(value)
		enddef

		var   ctx    = Context.new('42 is the answer')
		const Parse  = Regex('\d\+')->Apply(StoreNumber)
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
		echo $'Parsed number: {ctx.state.storedNumber}'
<
		Output:
>
		true
		Value: null
		Index: 2
		Parsed number: 42
<
Lab({parser}, {string})				*libparser.Lab()*
		Transform {parser} into a parser with a "labelled failure".
		When the parser fails, parsing stops immediately instead of
		backtracking, and a {string} explaining what was expected is
		returned in the result.

		For instance, the following parses without errors:
>
		var ctx = Context.new('abc', 0)
		const Parse = OneOf(
		                 Seq(Text('a'), Text('x')),
		                     Regex('.bc')
		               )
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: abc
		Index: 3
<
		In the above snippet, Seq() fails when trying to match
		`Text('x')`, but the parser backtracks and tries the next
		parser `Regex('.bc')`, which succeeds.

		The following stops parsing and returns a syntax error as soon
		as it fails to match `Text('x')`. The regex is not tried:
>
		var ctx = Context.new('abc', 0)
		const Parse = OneOf(
		                 Seq(Text('a'), Lab(Text('x'), 'name "x"')),
		                 Regex('.bc')
		              )
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: name "x"
		Errpos: 1
		Index: 0
<
		If the text to be parsed is, say, `zbc` instead of `abc`, then
		parsing succeeds as in the previous example, because failing
		to match `Text('a')` does not prevent backtracking.

LookAhead({parser})				*libparser.LookAhead()*
		Apply {parser} without consuming any input. For example:
>
		var ctx = Context.new('abc', 0)
		const Parse = LookAhead(Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: null
		Index: 0
<
		Parsing is successful, but the index still points at the first
		character. The value of this parser is always |null|.

Many({parser})					*libparser.Many()*
		Apply a parser zero or more times, as many as possible, and
		accumulate the parsed results into a |list|. This parser fails
		only if {parser} fails with a labelled failure (see
		|libparser.Lab()|).
>
		var ctx = Context.new('aaaaabc', 0)
		const Parse = Many(Text('a'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ['a', 'a', 'a', 'a', 'a']
		Index: 5
<
Map({parser}, {func})				*libparser.Map()*
		Apply {parser} and map a successful result to a callback
		{func}. {func} receives two arguments: the first is the value
		parsed by {parser}, and the second is the current
		|libparser.Context|.  The function must return another value.
		If the function raises an error, then the parser returns
		a failure labelled with the raised exception.

		Example:
>
		var ctx = Context.new('42', 0)
		const Parse = Regex('\d\+')->Map((v, _) => str2nr(v))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: 42
		Index: 2
<
NegLookAhead({parser})				*libparser.NegLookAhead()*
		Apply {parser}, then turn any failure into a success, and
		a success into a backtracking failure. In any case, do not
		consume any input. The value of this parser is always |null|.

		An example of failure turned into a success:
>
		var ctx = Context.new('abc', 0)
		const Parse = NegLookAhead(Text('ax'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: null
		Index: 0
<
		An example of success turned into a backtracking failure:
>
		var ctx = Context.new('abc', 0)
		const Parse = NegLookAhead(Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: ''
		Errpos: 2
		Index: 0
<
		In either case, after the look-ahead the index still points at
		the same character in the text as before the look-ahead.

OneOf(...{parser})				*libparser.OneOf()*
		Return a parser that tries each of the input parsers in the
		given order, starting from the same point in the input.
		A parser is tried only if the previous one has failed. The
		returned result is the result of the first parser that
		succeeds or fails with an error that prevents backtracking
		(see |libparser.Lab()|). If no parser succeeds or generates
		a labelled failure then an unlabelled (backtracking) failure
		is returned.

		An example in which the parser succeeds:
>
		var ctx = Context.new('abcd', 0)
		const Parse = OneOf(Seq(Text('abc'), Eof), Text('abcd'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: abcd
		Index: 4
<
		In the snippet above, the first parser tried by OneOf()
		recognizes `abc`, but then it fails to match the end of the
		text. The parser then backtracks and tries the second choice
		`Text('abcd')`, which succeeds.

		An example in which the parser generates a labelled failure
		(no backtracking):
>
		var ctx = Context.new('abcd', 0)
		const ErrEof = Lab(Eof, 'end of input')
		const Parse = OneOf(Seq(Text("abc"), ErrEof), Text("ab"))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: 'end of input'
		Errpos: 3
		Index: 0
<
		In this example, OneOf() fails because, after successfully
		matching `abc`, it fails to match the end of the text, and
		this is considered a non-backtracking failure. A syntax error
		at position 3 is returned, where an "end of input" was
		expected.

		An example that generates an unlabelled (backtracking)
		failure:
>
		var ctx = Context.new('abcd', 0)
		const Parse = OneOf(Seq(Text("abc"), Eof), Text("ax"))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: ''
		Errpos: 3
		Index: 0
<
		Here, the first choice fails as in the first example, but then
		also the second choice `Text("ax")` fails. The position of the
		farthest failure is returned.

OneOrMore(...{parser})				*libparser.OneOrMore()*
		Apply a parser one or more times, as many as possible, and
		accumulate the parsed results into a |list|.

		An example in which the parser succeeds:
>
		var ctx = Context.new('ababcd', 0)
		const Parse = OneOrMore(Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ['ab', 'ab']
		Index: 4
<
		An example in which the parser fails:
>
		var ctx = Context.new('acac', 0)
		const Parse = OneOrMore(Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: ''
		Errpos: 0
		Index: 0
<
Opt({parser})					*libparser.Opt()*
		Apply {parser} and return its result in case of success; if
		{parser} fails, succeed without consuming any input. This
		parser is equivalent to OneOf({parser}, Eps). This parser can
		fail only if {parser} returns a labelled failure.
>
		var ctx = Context.new('abcd', 0)
		const Parse = Opt(Text('abx'))
		const result = Parse(ctx)

		echo result.success
		echo $"Value: '{result.value}'"
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ''
		Index: 0
<
Seq(...{parser})				*libparser.Seq()*
		Compose the given parsers sequentially, and succeed if and
		only if every parser in the sequence succeeds. Collect the
		result of the parser sequence into a |list|. If a parser
		fails, report its failure. Examples:
>
		var ctx = Context.new('abcd', 0)
		const Parse = Seq(Text('a'), Text('b'), Text('cd'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ['a', 'b', 'cd']
		Index: 4
<
		The following parser fails:
>
		var ctx = Context.new('abcd', 0)
		const Parse = Seq(Text('a'), Text('b'), Text('cx'))
		const result = Parse(ctx)

		echo result.success
		echo "Label:" result.label
		echo "Errpos:" result.errpos
		echo "Index:" ctx.index
<
		Output:
>
		false
		Label: ''
		Errpos: 2
		Index: 0
<
Skip({parser})					*libparser.Skip()*
		Apply a parser and throw away its result upon success. The
		returned value in case of success is always |null|.
>
		var ctx = Context.new('abcd', 0)
		const Parse = Skip(Text('ab'))
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: null
		Index: 2
<
==============================================================================
5. Other functions				*libparser-other-functions*

Lexeme({parser})				*libparser.Lexeme()*
		Return a function that transforms a parser P into another
		parser that first applies P and then uses {parser} to skip
		stuff (e.g., whitespace, comments). Return the result of P.
		For example, |libparser.TextToken()|('abc') is essentially the
		same as Lexeme(Blank)(Text('abc')), and
		|libparser.RegexToken()|('\w') is essentially the same as
		Lexeme(Blank)(Regex('\w')).

RegexToken([{parser}])				*libparser.RegexToken()*
		Return a |libparser.Regex()| parser generator that matches
		a given regular expression, then skips the text matched by
		{parser}. When {parser} is not provided, |libparser.Blank()|
		is used to skip optional whitespace.

		Pattern matching follows the rules of |match()|. Example:
>
		var ctx = Context.new('ab  c', 0)
		const R = RegexToken()
		const Parse = R('\w\+')
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: ab
		Index: 4
<
		The index now points at character `c` in the text. If
		|libparser.Regex()| had been used then the index would have
		been at position 2.

		See also |libparser.Lexeme()|.

TextToken([{parser}])				*libparser.TextToken()*
		Return a |libparser.Text()| parser generator that matches
		a given text, then skips the text matched by {parser}. When
		{parser} is not provided, |libparser.Blank()| is used to skip
		optional whitespace.
>
		var ctx = Context.new('a  b c', 0)
		const T = TextToken()
		const Parse = T('a')
		const result = Parse(ctx)

		echo result.success
		echo "Value:" result.value
		echo "Index:" ctx.index
<
		Output:
>
		true
		Value: a
		Index: 3
<
		The index now points at character `b` in the text. If
		|libparser.Text()| had been used then the index would have
		been at position 1.

		See also |libparser.Lexeme()|.

=============================================================================
6. Classes					*libparser-classes*

						*libparser.Context*
new({string}[, {index}])
		Instantiate a context for parsing {string} starting from
		position {index}. If {index} is not given, the string is
		parsed starting at index zero.

		A Context object has the following attributes:

		- "text" (read-only): the text to be parsed.
		- "index": the next position (in bytes) in the text yet to be
		  parsed.
		- "farthest": The position of the farthest failure.
		- "state": a dictionary of arbitrary values.

		While "index" and "farthest" are automatically updated as
		parsing proceeds, the content of "state" is under the complete
		control of the user. During parsing |libparser.Apply()| and
		|libparser.Map()| can be used to access and update the
		parser's state.

Reset([{index}])
		Reset this context by positioning the index at the given
		{index} (0 by default). This also resets the internal state of
		the object.

						*libparser.Result*
newSuccess([{value}])
		Instantiate a parser's result representing successful parsing
		producing the given {value}. If a value is not provided,
		|null| is used.

		A Result object built with this function has a state
		initialized as follows:

		- "success" (read-only): a Boolean flag automatically set to
		  |true| to indicate successful parsing.
		- "value" (read-only): the parsed value.
		- "label" (read-only): not used (an empty string).
		- "errpos" (read-only): not used (set to -1).

newFailure({errpos}[, {label}])
		Instantiate a parser's result representing a failure at
		position {errpos}. If a string {label} is given, then the
		failure causes the parser to stop. If {label} is not given,
		then the result is a normal, backtracking, failure.

		A Result object built with this function has a state
		initialized as follows:

		- "success" (read-only): a Boolean flag automatically set to
		  |false| to indicate that parsing has failed.
		- "value" (read-only): set to |null|.
		- "label" (read-only): an error message.
		- "errpos" (read-only): the position in the text where the
		  failure occurred.

 vim:tw=78:ts=8:noet:ft=help:norl:
