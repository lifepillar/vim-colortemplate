vim9script

import 'librelalg.vim'      as ra
import '../colorscheme.vim' as colorscheme
import '../version.vim'     as version

const Filter      = ra.Filter
const Select      = ra.Select
const SortBy      = ra.SortBy
const Table       = ra.Table
const Transform   = ra.Transform

type  Colorscheme = colorscheme.Colorscheme
type  Database    = colorscheme.Database
const VERSION     = version.VERSION

export def In(v: any, items: list<any>): bool
  return index(items, v) != -1
enddef

export def CompareDistinct(s1: string, s2: string): number
  return s1 < s2 ? -1 : 1
enddef

export def CompareByHiGroupName(t: dict<any>, u: dict<any>): number
  if t.HiGroup == u.HiGroup
    return 0
  elseif t.HiGroup == 'Normal'
    return -1
  elseif u.HiGroup == 'Normal'
    return 1
  endif

  return CompareDistinct(t.HiGroup, u.HiGroup)
enddef

export def CompareByDiscrName(t: dict<any>, u: dict<any>): number
  if t.DiscrName == u.DiscrName
    return 0
  endif

  return CompareDistinct(t.DiscrName, u.DiscrName)
enddef

export def CompareEnvironments(e1: string, e2: string): number
  if e1 == e2
    return 0
  elseif e1 == 'default'
    return -1
  elseif e2 == 'default'
    return 1
  elseif e1 == 'gui'
    return -1
  elseif e2 == 'gui'
    return 1
  else
    return str2nr(e1) > str2nr(e2) ? -1 : 1
  endif
enddef

export interface IGenerator
  def Generate(theme: Colorscheme): list<string>
endinterface

export abstract class Generator implements IGenerator
  var language:       string       = 'vim9'
  var comment_symbol: string       = '# '
  var let_keyword:    string       = ''
  var const_keyword:  string       = 'const '
  var var_prefix:     string       = ''
  var header:         list<string> = ['vim9script', '']
  var footer:         list<string> = ['']

  abstract def Generate(theme: Colorscheme): list<string>

  def SetLanguage(language: string)
    if language == 'vim9'
      this.language       = 'vim9'
      this.comment_symbol = '# '
      this.let_keyword    = ''
      this.const_keyword  = 'const '
      this.var_prefix     = ''
      this.header         = ['vim9script', '']
      this.footer         = []
    elseif language == 'viml'
      this.language       = 'viml'
      this.comment_symbol = '" '
      this.let_keyword    = 'let '
      this.const_keyword  = 'let '
      this.var_prefix     = 's:'
      this.header         = []
      this.footer         = []
    endif
  enddef

  def AddMeta(template: string, value: string)
    if !empty(value)
      this.header->add(this.comment_symbol .. printf(template, value))
    endif
  enddef

  def AddMultivaluedMeta(template: string, items: list<string>)
  if !empty(items)
    this.AddMeta(template, items[0])

    var n = len(items)
    var space = repeat(' ', 14)
    var i = 1

    while i < n
      this.header->add(this.comment_symbol .. printf('%s%s', space, items[i]))
      ++i
    endwhile
  endif
  enddef

  def BuildDefaultHeader(theme: Colorscheme)
    this.header = this.language == 'vim9' ? ['vim9script', ''] : []

    var sa = len(theme.authors) > 1     ? 's:' : ': '
    var sm = len(theme.maintainers) > 1 ? 's:' : ': '
    var su = len(theme.urls) > 1        ? 's:' : ': '

    this.AddMeta('Name:         %s', theme.fullname)
    this.AddMeta('Version:      %s', theme.version)
    this.AddMultivaluedMeta('Description:  %s', theme.description)
    this.AddMultivaluedMeta($'Author{sa}      %s', theme.authors)
    this.AddMultivaluedMeta($'Maintainer{sm}  %s', theme.maintainers)
    this.AddMultivaluedMeta($'URL{su}         %s', theme.urls)
    this.AddMeta('License:      %s', theme.license)

    if theme.options.timestamp
      this.AddMeta('Last Change:  %s', strftime(theme.options.dateformat))
    endif

    this.header->add('')

    if theme.options.creator
      this.AddMeta('Generated by Colortemplate v%s', VERSION)
      this.header->add('')
    endif

    if !theme.backgrounds.light
      this.header->add('set background=dark')->add('')
    elseif !theme.backgrounds.dark
      this.header->add('set background=light')->add('')
    endif

    this.header->add('hi clear')
    this.header->add($"{this.let_keyword}g:colors_name = '{theme.shortname}'")

    if !empty(theme.verbatimtext)
      this.header->add('')
      this.header += theme.verbatimtext
    endif
  enddef

  def BuildDefaultFooter(theme: Colorscheme)
    this.footer = []

    if theme.options.palette # Write the color palette as a comment
      for background in ['dark', 'light']
        if theme.HasBackground(background)
          var db = theme.Db(background)
          var palette = db.Color
            ->Select((t) => !empty(t.Name) && t.Name != 'none' && t.Name != 'fg' && t.Name != 'bg')
            ->SortBy('Name')

          this.footer->add(this.comment_symbol .. 'Background: ' .. background)
          this.footer->add(this.comment_symbol)
          this.footer += map(split(Table(palette, {
            columns: [
              'Name',
              'GUI',
              'Base256',
              'Base256Hex',
              'Base16'
            ]
          }), "\n"), (_, v) => this.comment_symbol .. v)
          this.footer->add('')
        endif
      endfor
    endif

    this.footer->add('')
    this.footer->add(this.comment_symbol .. $'vim: et ts=8 sw={theme.options.shiftwidth} sts={theme.options.shiftwidth}')
  enddef
endclass
