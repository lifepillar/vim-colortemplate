*libreactive.txt*	For Vim version 9.1	Last change: 2025 Apr 25

Note: Vim 9.1 or later is required.

0. Basics				|libreactive-basics|
1. Transactional updates		|libreactive-transactions|
2. Cascading effects			|libreactive-effects|
3. Caching computations			|libreactive-caching|
4. Pools				|libreactive-pools|
5. Examples				|libreactive-examples|
6. Tips and tricks			|libreactive-tips|
7. API					|libreactive-api|
8. Options				|libreactive-options|

==============================================================================
0. Basics					*libreactive-basics*

This library allows you to automatically execute arbitrary code ("effects")
whenever the value of a "reactive" variable is updated. For example:
>
	vim9script
	import 'libreactive.vim' as react

	var love = react.Property.new('pizza')

	react.CreateEffect(() => {
	  echo $'I love {love.Get()}!'
	})

	love.Set('nature')
	love.Set('Vim')
<
Output:
>
	I love pizza!
	I love nature!
	I love Vim!
<
"Reactive variables" are called "properties" and they are instances of the
|libreactive.Property| class. They are basically thin wrappers around a value
of any type, which can be accessed with `Get()` and modified with `Set()`.

"Effects" are functions or lambdas that read, and possibly write, properties.
Effects are automatically bound to the properties they access, so that they
are notified of their changes. In the example above, the effect reads the
value of the `love` property: that is enough to make the effect an observer of
`love`. As such, the effect is re-executed every time the value of `love` is
updated.

The link between properties and effects is dynamic. Every time an effect is
executed, the first thing that happens is that the list of properties it
observes is cleared. Then, every property that is read during that execution
of the effect is bound to the effect again. This is best understood with an
example:
>
	vim9script
	import 'libreactive.vim' as react

	var name = react.Property.new('Jack')
	var show = react.Property.new(true)
	var count = 0

	react.CreateEffect(() => {
	  ++count

	  if show.Get()
	    echo name.Get()
	  endif
	})

	echo count       # 1 (The effect is run upon creation, echoing 'Jack')
	name.Set('Stan') # The effect is triggered, and echoes 'Stan'
	show.Set(false)  # The effect is triggered, nothing echoed
	name.Set('Roy')  # Name is updated, but the effect is not triggered
	name.Set('Gus')  # Name is updated, but the effect is not triggered
	name.Set('Lee')  # Name is udpated, but the effect is not triggered
	show.Set(true)   # The effect is triggered, and echoes 'Lee'
	echo count       # <== Overall, the effect was executed 4 times

In this example, `count` is used to keep track of how many times the effect is
run. The first thing to notice is that |libreactive.CreateEffect()| executes
its argument: since `show` is `true` at the time the effect is created, the
current value of `name` ('Jack') is echoed. As the effect has accessed both
`show` and `name`, it becomes an observer of both properties. Therefore, when
`name` is changed to 'Stan', the effect is executed again, and it is set again
to observe both properties.

Then, `show` is set to `false`. This causes the effect to be executed a third
time, but this time only `show` is read during the execution of the effect,
hence the effect starts observing only `show`. Therefore, subsequent updates
of `name` do not trigger any effect.

Eventually, `show` is set to `true` again, which triggers the effect (which
was observing `show`): since `show` is now true, the current value of `name`
is echoed, and the effect starts observing both properties again.

==============================================================================
1. Transactional updates			*libreactive-transactions*

By default, the effects observing a property are triggered immediately after
the value of that property is updated. In circumstances in which such
behaviour is undesirable, it is possible to postpone the execution of the
effects at the end of a transaction.

Consider this example:
>
	vim9script
	import 'libreactive.vim' as react

	var firstName = react.Property.new('John')
	var lastName  = react.Property.new('Doe')

	react.CreateEffect(() => {
	  echo $'{firstName.Get()} {lastName.Get()}'
	})

	firstName.Set('Jane') # <== Triggers the effect
	lastName.Set('Smith') # <== Triggers the effect again
<
The code above will echo an intermediate name 'Jane Doe'. If the intent of the
user is to update first and last names atomically, then the updates must be
wrapped into a transaction:
>
	react.Transaction(() => {
	  firstName.Set('Jane')
	  lastName.Set('Smith')
	}) # <== Effect triggered once at commit time
<
Then, only 'John Doe' and 'Jane Smith' will be echoed.

See also |libreactive.Transaction()|.

==============================================================================
2. Cascading effects				*libreactive-effects*

An effect may contain arbitrary code, including statements that update some
properties. In general, that causes other effects to be executed in cascade.
For example:
>
	vim9script
	import 'libreactive.vim' as react

	var A = react.Property.new(2)
	var B = react.Property.new(1)
	var result = -1

	react.CreateEffect(() => { # Effect 1
	  result = B.Get()
	})

	react.CreateEffect(() => { # Effect 2
	  B.Set(A.Get())
	})

	echo result # <== 2
<
Since Effect 1 becomes an observer of property `B`, when Effect 2 is executed,
it will trigger Effect 1, because Effect 2 modifies the value of property `B`.
So, the code above will actually run:
>
	result = B.Get() # result == 1
	B.Set(A.Get())   # B == 2
	result = B.Get() # result == 2
<
One should be careful not to create cycles of effects. The library implements
a heuristic to detect infinite recursion (see |libreactive.queue_size|).
This trivial example will fail:
>
	var p = react.Property.new(0)

	react.CreateEffect(() => {
	  p.Set(p.Get() + 1)
	})
<
This effect becomes an observer of `p`, but it also changes `p`, endlessly
triggering itself.

NOTE: there are no restrictions in reading or writing properties outside of
effects. The following snippet is perfectly fine:
>
	var p = react.Property.new(1)

	react.CreateEffect(() => {
	  echo $'The current value of p is {p.Get()}'
	})

	for i in range(10)
	  p.Set(p.Get() * 2)
	endfor
<
NOTE: when one does want to access the value of a property without any side
effects even within an effect, it is possible to access the `value` attribute
of the property:
>
	var p = react.Property.new(0)

	react.CreateEffect(() => {
	  p.Set(p.value + 1)
	})

	echo p.Get() # 1
<
The above works and sets the value of the property to 1.

Effects are executed inside a transaction. Therefore, no matter how many
properties they change, their cascading effects are run at once only at the
end of the effect's block. Besides, the properties accessed with Get() during
the execution of an effect are guaranteed not to change within the span of
that execution (read consistency).

Effects' propagation is breadth-first: if effect E1 updates property P1, which
is observed by effects E2 and E3, then at the end of E1:

- both E2 and E3 are executed to completion, one after another;
- only then, the effects of E2 and E3 (if any) are evaluated recursively in
  a breadth-first manner.

This semantics makes it easy to reason about effects, because each effect is
treated as an atomic unit. Evaluation is done by repeatedly performing the
following three steps until all cascading effects have been executed:

1. run the current effect to completion, keeping track of each property that
   is modified by the effect;
2. for each such property, enqueue its effects in the order in which
   the properties were updated, skipping effects that are already in the
   queue;
3. pop the effect at the top of the queue, and go to step 1.

Note that in step 2 the effects are pushed to the execution queue following
the order in which the properties are updated, without taking into account any
causal relationship among effects. This may lead to situations in which the
same effect is executed multiple times during the same cascading propagation
even if everything is wrapped in a transaction. For example:
>
	var p1 = react.Property.new(0)
	var p2 = react.Property.new(0)
	var result = 0

	react.CreateEffect(() => { # Effect 1
	  p1.Set(p2.Get())
	})

	react.CreateEffect(() => { # Effect 2
	  result = p1.Get()
	})

	react.Transaction(() => {
	  p1.Set(1)
	  p2.Set(2)
	})

	echo result  # 2
<
Just before the transaction commits, the current value of result is 0, the
value of p1 is 1 and the value of p2 is 2. Besides, the effects' queue
contains Effect 2 and Effect 1 in this order.

Then, during the commit of the transaction, Effect 2 is popped from the queue
first and executed, which sets result to 1. Then, Effect 1 is popped from the
queue and executed, which sets p1 to 2. At this point, Effect 2 is pushed into
the queue again, because p1 has been updated. Therefore, at commit time,
Effect 2 is executed twice and the final result is 2.

The result is correct, but since Effect 2 depends on Effect 1 (because Effect
2 reads a value written by Effect 1), it would be more efficient to execute
Effect 1 before Effect 2. This can be achieved by assigning weights to
effects.

To force the execution of effects in a specific order, each effect has an
associated weight, which is zero by default. Effects with a smaller weight are
pushed higher in the queue rather than at the end.

We can make Effect 2 "heavier" than Effect 1 by assigning it a positive weight:
>
	react.CreateEffect(() => { # Effect 2
	  result = p1.Get()
	}, {weight: 1})
<
Now, during the transaction Effect 2 is pushed to the queue when p1 is set, as
before. When p2 is set, Effect 1 is pushed to the queue, too, but this time
before Effect 2. Hence, at commit time Effect 1 is executed before Effect 2.
The final result is still 2, but now Effect 2 was executed just once.

One may think that libreactive could automatically determine the best order of
execution by some dynamic topological sorting of effects based on the current
dependency graph. We end this section by claiming that this is in general
impossible.

Consider the following code:
>
	var p1     = react.Property.new(2)
	var p2     = react.Property.new(3)
	var result = 0
	var coin   = 0

	react.CreateEffect(() => { # Effect 1
	  if coin == 0
	    p2.Set(p1.Get() * 2)
	  else
	    result = p1.Get() + p2.Get()
	  endif
	})

	react.CreateEffect(() => { # Effect 2
	  if coin == 0
	    result = p1.Get() + p2.Get()
	  else
	    p2.Set(p1.Get() * 3)
	  endif
	})

	coin = rand() % 2
	p1.Set(1)

	echo result
<
The initial dependency graph, just before p1 is set to 1, looks as follows:
>
	┌───r──── p1 ───r───┐
	▼                   ▼
	E1                  E2
	│                   ▲
	└───w───► p2 ───r───┘
<
where `─w─►` means that the effect writes a property and `─r─►` means that the
effect reads a property. In particular, it is clear that E2 depends on E1
because E2 reads a value written by E1. Therefore, based on the above
dependency graph, E1 should be pushed to the execution queue before E2.

Now, whether that is a good choice or not depends on the value of coin, over
which the script has no control (in this example it is set randomly, but that
could be a value that depends on user's input, the content of a buffer, etc).

If, before p1.Set(1), coin is 0 then indeed executing E1 then E2 is optimal:
each effect will be executed once. But if coin is 1, then the dependecy graph
changes as the effects of setting p1 unfold. After executing E1, the graph
becomes:
>
	┌───r──── p1 ───r───┐
	▼                   ▼
	E1                  E2
	▲                   ▲
	└───r──── p2 ───r───┘
<
The direction of (E1,p2) has been reversed. After executing E2:
>
	┌───r──── p1 ───r───┐
	▼                   ▼
	E1                  E2
	▲                   │
	└───r──── p2 ◄──w───┘
<
The direction of (E2,p2) has also been reversed. So, now it's E1 that depends
on E2, so E1 is executed once more. You may convince yourself that, when coin
is 1, executing E2 first and then E1 produces an equivalent result, yet it is
more efficient. But that cannot be discovered in advance.

						*libreactive-nested-effects*

Effects by default can be nested—that is, an effect may create another effect
or call a function or method that does it.

Nested effects must be managed carefully, because they may result in an
uncontrolled growth of function calls or even infinite loops. If effect E1
calls a function that creates an effect E2 then every time E1 is executed
a new instance of E2 is created. So, each time a dependent property of E2 is
updated, E2 is executed many times, one for each copy that has been created by
E1. This may not be what one wants.

Forbidding nested effects, however, may be limiting in some circumstances. For
instance, this class creates a new property and binds it to an effect every
time the class is instantiated:
>
	class Foo
	  var p = react.Property.new(0)

	  def new(x: number)
	    this.p.Set(x)
	    react.CreateEffect(() => {
	      echo $'Instance has value {this.p.Get()}'
	    })
	  enddef
	endclass
<
In this case, it is expected for the effect created by `new()` to be called
once for each instance. If nesting were not allowed it would not be possible
to create instances of `Foo` within the scope of another effect.

During development or for debugging purposes it may be useful to know if and
when nested effects are created. You may set |libreactive.debug_level| to |1|
to log such information into the message history.

==============================================================================
3. Caching computations				*libreactive-caching*

Sometimes, an effect performs an expensive computation, and it would be
wasteful to redo the computation if the properties observed by the effect have
not changed. For example, this is inefficient:
>
	vim9script
	import 'libreactive.vim' as react

	var p = react.Property.new(0.0)

	def F(): float
	  echo 'Executing F()...'
	  sleep 3 # Simulate some expensive computation that depends on p
	  return cos(p.Get())
	enddef

	react.CreateEffect(() => {
	  echo $'Effect 1: {F()}'
	})

	react.CreateEffect(() => {
	  echo $'Effect 2: {F()}'
	})

	p.Set(1.23)
<
In the code above, F() is executed four times: twice when Effect 1 and Effect
2 are created, and two more times when `p` is updated (once for each effect).

In such cases, it is convenient to cache the result of the expensive function.
This can be done by using |libreactive.ComputedProperty()|, which caches the
value of a function or lambda F and automatically recomputes F whenever the
properties on which F depends are updated.

The example above can be rewritten as follows:
>
	vim9script
	import 'libreactive.vim' as react

	var p = react.Property.new(0.0)

	def F(): float
	  echo 'Executing F()...'
	  sleep 3 # Simulate some expensive computation that depends on p
	  return cos(p.Get())
	enddef

	var CachedF = react.ComputedProperty.new(F)

	react.CreateEffect(() => {
	  echo $'Effect 1: {CachedF.Get()}'
	})

	react.CreateEffect(() => {
	  echo $'Effect 2: {CachedF.Get()}'
	})

	p.Set(1.3)
<
Now, F() is executed only if necessary: once when the computed property is
created (to cache the initial value of F for p equal to 0.0) and once more
when `p` is updated (to compute the updated value of F for p equal to 1.3).
The function F is not executed when Effect 1 and Effect 2 are run: those
effects just retrieve the cached value from the property.

==============================================================================
4. Pools					*libreactive-pools*

So far we have talked about creating properties that trigger some effects. In
practice, one will also want to stop properties to trigger effects.

That is done by calling the ClearEffects() method of |libreactive.Property()|,
which unsubscribes all the effects that are currently observing the affected
property.

Let us see why sometimes it is necessary to clear the properties. The
following script defines a :Foo command that creates an effect and prints
the value of the property and its associated effects:
>
	vim9script
	import 'libreactive.vim' as react

	var p0 = react.Property.new(0)

	def Foo()
	  react.CreateEffect(() => {
	    p0.Get()
	  })

	  echo p0 p0.effects
	enddef

	command! -nargs=0 Foo Foo()
<
If you execute :Foo multiple times, you will see that each time a new "phantom
effect" (executing the same lambda) is added to the property's observers. If
the value of the property is updated, the same code will be run multiple
times. This is in general not what one wants. Clearing the property before
recreating the effect fixes the issue:
>
	def Foo()
	  p0.ClearEffects()
	  react.CreateEffect(() => {
	    p0.Get()
	  })
	enddef
<
When there are many properties, clearing each and every one may become a bit
tedious. The constructor of |libreactive.Property()| takes an optional
dictionary, which can be used to pass a |List| object to store references to
the properties created by your script. Such list is called a "pool". If the
constructor is provided with a pool, it will add the new property to that
pool.

A pool allows you to quickly iterate over all the properties in your script.
For example:
>
	vim9script
	import 'libreactive.vim' as react

	# Define a pool:
	var pool: list<react.Property> = []

	# New properties are added to the pool:
	var p0 = react.Property.new(0, {pool: pool})
	var p1 = react.Property.new(1, {pool: pool})

	react.CreateEffect(() => {
	  p0.Get()
	  p1.Get()
	})

	# Inspect the value and effects of each property
	echo pool mapnew(pool, (_, p) => string(p.effects))

	# Clear all the effects
	for property in pool
	  property.ClearEffects()
	endfor

	# Check that the effects have been cleared
	echo pool mapnew(pool, (_, p) => string(p.effects))
<
The pool is under the complete control of your script: libreactive does not
use pools in any other way beyond appending a property to a list, and it does
not store pools internally. In other words, initializing a property with
a pool is simply a convenience for code that looks like this:
>
	var p0:   react.Property.new(0)
	var p1:   react.Property.new(1)
	var pool: list<react.Property> = []

	pool->add(p0)
	pool->add(p1)
<
==============================================================================
5. Examples					*libreactive-examples*

An obvious application of libreactive is to support interactive UIs in Vim,
such as interactive popup windows or palettes.

The following script is a self-contained example outlining a general approach
to implementing a reactive UI. In the script, there are two sources of events:
popup actions and autocommands. The content of the popup is kept in sync with
the reactive state, no matter what the cause of a state change is, using an
effect that redraws the popup when necessary.

A mouse click anywhere in the popup increments a counter of mouse clicks;
clicking on the emoji will also change it; and moving the cursor updates the
count of cursor movements. Finally, the popup also displays, next to the
title, a counter of how many times the popup has been redrawn.
>
	vim9script
	import 'libreactive.vim' as react

	const EMOJIS = ['🦊', '🐼', '🍀', '💐']

	# Reactive state
	var pool: list<react.Property> = []
	var emoji = react.Property.new(0, {pool: pool}) # Index of displayed emoji
	var click = react.Property.new(0, {pool: pool}) # Counter of mouse clicks
	var moved = react.Property.new(0, {pool: pool}) # Counter of cursor movements

	var counter = 0 # Count the number of times the popup is redrawn

	augroup Libreactive
	  autocmd CursorMoved * moved.Set(moved.Get() + 1)
	augroup END

	def HandleEvent(winid: number, keyCode: string): bool
	  if keyCode == "\<LeftMouse>"
	    var mousepos = getmousepos()

	    if mousepos.winid == winid
	      react.Transaction(() => {
	        if mousepos.line == 2 && mousepos.column == 1 # Emoji hit
	          # Select next emoji
	          emoji.Set((emoji.Get() + 1) % len(EMOJIS))
	        endif

	        click.Set(click.Get() + 1) # Increment mouse click
	      })
	      return true
	    endif
	  endif

	  return false
	enddef

	def ClosedCallback(winid: number, result: any = '')
	  if exists('#Libreactive')
	    autocmd! Libreactive
	    augroup! Libreactive
	  endif
	enddef

	def Redraw(popup_id: number)
	  ++counter
	  popup_settext(popup_id, [
	    $'Libreactive {counter}  ',
	    EMOJIS[emoji.Get()],
	    string(click.Get()),
	    string(moved.Get()),
	  ])
	enddef

	def RunBabyRun()
	  for property in pool
	    property.ClearEffects()
	  endfor

	  var popup_id = popup_create('', {
	    close:    'button',
	    filter:   HandleEvent,
	    callback: ClosedCallback,
	  })
	  var bufnr = winbufnr(popup_id)

	  react.CreateEffect(() => Redraw(popup_id), {weight: 100})
	enddef

	RunBabyRun()
<
Note that mouse clicks are handled inside a transaction because they may
update two state variables (the emoji's index and the click counter), but we
want the popup to be redrawn only once. Without the wrapping transaction the
popup would be redrawn twice every time the user clicks on the emoji: the
first time, when the emoji is set and the second time when the click counter
is incremented. So, the transaction avoids a double rendering.

Note also that a large weight has been assigned to the redraw effect. Although
that is not required in the script above, in general one wants to make sure
that redrawing happens once after all the effects that update the state have
been executed. Again, this avoids rendering the popup more often than
necessary. For a discussion why transactions alone are in general insufficient
for such a purpose, see |libreactive-effects|.

The UI update can also be made more granular. By replacing `RunBabyRun()`
above with the following version, only the lines of the popup window that go
out of sync are updated:
>
	def RunBabyRun()
	  for property in pool
	    property.ClearEffects()
	  endfor

	  var popup_id = popup_create(['Libreactive  '], {
	    close:    'button',
	    filter:   HandleEvent,
	    callback: ClosedCallback,
	  })
	  var bufnr = winbufnr(popup_id)

	  react.CreateEffect(() => {
	    setbufline(bufnr, 2, EMOJIS[emoji.Get()])
	  })

	  react.CreateEffect(() => {
	    setbufline(bufnr, 3, string(click.Get()))
	  })

	  react.CreateEffect(() => {
	    setbufline(bufnr, 4, string(moved.Get()))
	  })
	enddef
<
In this case, we don't need transactions or weights: a state change
immediately updates all and only the parts of the UI that are affected by that
change.

Of course, libreactive is not limited to building popups, and its use is not
limited to the what has been described above. Be creative!

==============================================================================
6. Tips and tricks				*libreactive-tips*

- Properties may contain collections such as lists or dictionaries. Some care
  is needed to manipulate them, though, because such values are returned by
  reference by `Property.Get()`. Effects by default are triggered only if the
  property value changes, but changing a value obtained by reference will also
  update the value stored inside the property (because it is the same object).
  Hence, when `Property.Set()` is invoked, the method will not detect any
  change and will not trigger any effect.

  This is not problematic:
>
	var p0 = react.Property.new([])
	var newValue = ['a'] # Another list
	p0.Set(newValue) # Will trigger effects
<
  Here, `newValue` is a different object than the stored property value. But
  the following will NOT trigger any effect:
>
	var p0 = react.Property.new([])
	var newValue = p0.Get()
	assert_true(newValue is p0.Get()) # true
	newValue->add('a') # Also updates p0's value
	p0.Set(newValue) # No change detected, no effects triggered
<
  The correct way to update a collection property is to force the update:
>
	p0.Set(newValue, {force: true})
<
  The dictionary argument causes the effects associated to the property to be
  executed unconditionally.

  Note: using lambdas to wrap collections, as is done in other languages, in
  general does not work with libreactive, because Vim treats different
  closures as equal if they correspond to the same syntactic definition:
>
	def MakeLambda(x: list<string>): func(): list<string>
	  return () => x
	enddef

	const F0 = MakeLambda(['a'])
	const F1 = MakeLambda(['b'])

	echo F0 == F1 # true
<
  Therefore, the following will not work without forcing the update as
  explained above (at which point, one may just use a list):
>
	var p0 = react.Property.new(MakeLambda([]))
	var newValue: list<string> = p0.Get()()
	newValue->add('a')
	p0.Set(MakeLambda(newValue)) # No effects triggered
<
- If you prefer a functional syntax for properties, you may create them with
  the following small helper function:
>
	def GetSet(
	  value: any, pool: list<react.Property> = null_list
	): list<func>
	  var p = react.Property.new(value, pool)
	  return [p.Get, p.Set]
	enddef

	var [P1, SetP1] = GetSet(42)
<
  Then, you may access the value of the property with `P1()` and set it with
  `SetP1()`.

- It is easy to keep two or more properties in sync. Let's say that your
  script has the following invariant: "p2 is always twice as p1". This can be
  enforced as follows:
>
	# The invariant holds to begin with
	var p1 = react.Property.new(1.0)
	var p2 = react.Property.new(2.0)

	react.CreateEffect(() => {
	  p1.Set(p2.Get() / 2.0)
	})

	react.CreateEffect(() => {
	  p2.Set(p1.Get() * 2.0)
	})

	p1.Set(5.0) # Sets p1 to 5.0 and p2 to 10.0
	p2.Set(p1.Get() * 5) # Sets p2 to 25.0, p1 to 12.5
<
  This does not go into an infinite loop because if Set() does not actually
  change the current value of the property, the property's effects are not
  triggered by default.

- Always assign a value to your properties at declaration time. Thet is,
  instead of doing this:
>
	var p0 = react.Property.new() # Initial value is null

	def F()
	  p0.Set('some value')
	enddef
<
  do this:
 >
	var p0 = react.Property.new('') # Initial value of type string

	def F()
	  p0.Set('some value')
	enddef
<
  The reason is that the latter will help detecting type mismatch errors. If
  you write this by mistake:
 >
	var p0 = react.Property.new('')

	def F()
	  p0.Set(0)
	enddef
<
  an error will be raised when `F()` is executed.

- If you think you need to read and write the same property inside an effect,
  you are probably doing it wrong: rethink about your problem. An exception is
  collection properties, because most often the new value is obtained by
  adding elements to or removing elements from the current value of the
  property, which you must read without side effects by accessing the
  property's `value` attribute.

- For properties defined at the script level, always define a pool in the
  script and clear all the properties in the initialization step of the
  script. This will avoid the "phantom effect" described in
  |libreactive-pools|.

- Prefer |libreactive.Transaction()| to |libreactive.Begin()| and
  |libreactive.Commit()|. The latter two are useful in very rare
  circumstances, e.g., when one needs to wrap in a transaction a call to
  a base class method, prefixed with "super.", because the call using super
  cannot appear within a lambda in some versions of Vim (that would raise
  |E1356|).

==============================================================================
7. API					*libreactive-api*

Classes ~

					*libreactive.Property*

new([{value}, {args}])
		Create a new property with the given {value}. {value} can be
		of any type. If no value is provided, the property is
		initialized with |null|.

		{args} is an optional dictionary that can be used to provide
		a pool. Then, the new property is added to the pool by the
		constructor. For example:
>
		var my_pool: list<react.Property> = []
		var my_property = react.Property.new(value, {pool: my_pool})
<
value
		The value of the property. Reading of writing this attribute
		does not trigger any effects. You should prefer Get() and
		Set() in most circumstances.

effects
		The list of effects currently bound to the property.

Get()
		Obtain the value of the property. If this method is called
		inside an effect's block, that effect is automatically
		registered as an observer of the property.

Set({value}[, {args}])
		Update the value of the property and execute all the effects
		currently associated with this property, if any. The effects
		are executed immediately unless the update is performed within
		a transaction or within an effect, in which case the effects
		are run only at the end of the transaction or at the end of
		the effect's block, respectively.

		By default, the effects are triggered only if the new value of
		the property is different from the current value (where == is
		used for the comparison). When {args} contains a `force` key
		set to |true|, though, the effects are always executed, even
		if the update does not change the value of the property.

Register({effect})
		Register an effect as an observer of the property.

ClearEffects()
		Un-register all the effects currently observing this property.
		After this, updating this property will not trigger any effect
		until the property is read again by some effect.


					*libreactive.ComputedProperty*

A subclass of |libreactive.Property| for caching derived values.

new({func}[, {args}])
		Create a new property that computes and caches the result of
		{func}. {func} must be a function with no parameters and an
		arbitrary return value. The function's value is automatically
		recomputed whenever any property upon which the function
		depends is updated.

		{args} is a dictionary that may contain the same keys as in
		|libreactive.Property|'s new() and
		|libreactive.CreateEffect()|.

Functions ~

					*libreactive.Begin()*
Begin()
		Start a transaction. This must always be paired with
		|libreactive.Commit()|.
		In most cases, |libreactive.Transaction()| is preferrable.

					*libreactive.Commit()*
Commit()
		Commit a transaction. This must always be paired with
		|libreactive.Begin()|.
		In most cases, |libreactive.Transaction()| is preferrable.

					*libreactive.CreateEffect()*
CreateEffect({func}[, {args}])
		Create a new effect running {func} and execute it once. {func}
		must be a function with no parameters and no return value. The
		effect object is returned.

		{args} is a dictionary of options: 

		- "weight": set the weight of the effect. The weight is
		  a |Number| affecting the ordering in which the effects of
		  a property or of a transaction are executed.

		- "execute": a boolean flag telling whether {func} should be
		  executed at once. The default is that CreateEffect()
		  immediately executes its argument: this is needed to
		  initially bind the effect to the properties accessed by
		  {func}. When this is set to |false|, {func} is not executed:
		  for the effect to the triggered, then, it must be manually
		  registered as an observer of some property: see
		  |libreactive.Property|'s Register() method.

					*libreactive.Reset()*
Reset()
		Clear the effects' queue. Any effects that are queued for
		execution will be removed from the queue without being
		executed. This may be useful in the context of a transaction
		to stop propagating the effects of some transaction's updates,
		for instance because some anomalous condition has been met.

					*libreactive.Transaction()*
Transaction({func})
		Execute {func} atomically: any property updates performed by
		{func} trigger their direct effects only once and only at the
		end of the transaction. Transactions may be nested.

==============================================================================
8. Options				*libreactive-options*

For each of the following script variables, a global setting of the form
`g:libreactive_<variable>` can also be defined. Script variables can be set
anywhere in your scripts. Global variables have an effect only if they are
defined before importing libreactive.

					*libreactive.debug_level*

Set the debug level:

  - `0`: no logging;
  - `1`: echo and log debugging information to the |message-history|.
>
	libreactive.debug_level = 0
<
					*libreactive.queue_size*

The maximum size of the internal effects' queue. This value should be
increased only if libreactive emits false positive errors about the recursion
limit being exceeded. (But then, how many effects do your properties have?!)
>
	libreactive.queue_size = 10000
<
 vim:tw=78:ts=8:noet:ft=help:norl:
