*libtinytest.txt*	For Vim version 9.0	Last change: 2024 Feb 05

Note: Vim 9.0.1501 or later is recommended.

Tiny Test is a minimalist unit testing library for Vim 9 script developers.
A unit test is just a function without arguments and return value whose
name starts with `Test`. Typically, tests contain Vim assertions (see
|assert-functions-details|). For instance:
>
	vim9script

	import 'libtinytest.vim' as tt

	def Test_OnePlusOneIsTwo()
	  assert_equal(2, 1 + 1)
	enddef

	const success = tt.Run()
<
The output always appears in a new scratch buffer.

The tests may also be read from another file using |libtinytest.Import|. For
example, this is how you may import a file `tests.vim` in the same directory
as the main test file:
>
	vim9script

	import 'libtinytest.vim' as tt
	tt.Import($"{expand('<sfile>:h')}/tests.vim")

	const success = tt.Run()
<
Using |:source| is also possible, but |libtinytest.Import| avoids running the
tests twice if the imported file contains a `Run()` statement.

It is possible to automatically execute a function before or after each test.
The functions must be assigned to |libtinytest.Setup| and
|libtinytest.Teardown|, respectively. For example:
>
	vim9script
	import 'libtinytest.vim' as tt

	tt.Setup = () => {
	  echo $'Before starting test {tt.done + 1}'
	}
	tt.Teardown = () => {
	  echo $'After finishing test {tt.done}'
	}

	# Tests here
	tt.Run()
<
Obviously, all the names that are used in tests must be visible to the tests.
Names that are exported by the script to be tested can be imported in the test
script. Sometimes, however, it is convenient to be able to test the private,
not exported, components of a script. To do so, the tests must be inlined in
the script itself. A variation of the following structure can serve the
purpose:
>
	vim9script

	# Here goes the code to be tested

	if !get(g:, 'test_mode', false)
	  finish
	endif

	import 'libtinytest.vim' as tt

	# Write the tests here
<
Then, to run the tests just set `g:test_mode` to `true` and source the script.

Variables ~

					*libtinytest.done*
done
		Counter of the number of tests that have been executed.

					*libtinytest.fail*
fail
		Counter of the number of tests that have failed.

					*libtinytest.Setup*
Setup
		This variable may be set to a function with no arguments and
		no return value, which is executed before each test.

					*libtinytest.Teardown*
Teardown
		This variable may be set to a function with no arguments and
		no return value, which is executed after each test. The
		function is executed no matter whether a test succeeds or
		fails.

Functions ~

					*libtinytest.AssertApprox()*
AssertApprox({expected}, {num}[, {rtol}, {atol}, {msg}])
		Check that {num} is approximately equal to the {expected}
		value, where "approximately" means within the relative
		tolerance {rtol} or within the absolute tolerance {atol} (or
		within both). If {msg} is provided, it is prefixed to the
		error message if the test fails.

		The default relative threshold is 0.001 (1â€° tolerance), and
		the default absolute tolerance is 0.0. So, by default only the
		relative threshold matters.

		For example:
>
		AssertApprox(1.0, 1.00001)          # OK
		AssertApprox(1.0, 1.01)             # Fails
		AssertApprox(10.0, 11.0, 0.1)       # Relative tolerance OK
		AssertApprox(10.0, 11.0, 0.0, 1.0)  # Absolute tolerance OK
		AssertApprox(10.0, 11.0, 0.05)      # Fails
		AssertApprox(10.0, 11.0, 0.05, 0.9) # Fails
<
AssertFails({func}, {errmsg}[, {msg}])	*libtinytest.AssertFails()*
		Check that {func} throws an error that contains the string
		{errmsg}. {msg} is an optional message shown when the test
		fails. {func} must be a function or lambda with no arguments
		and no return value. For example this assertion succeeds:
>
		AssertFails(() => {
		    throw 'This is a fatal error'
		}, 'fatal')
<
		This assertion fails because the function does not throw any
		error:
>
		AssertFails(() => {
		    return
		}, 'err')
<
		And this assertion fails because the thrown error does not
		contain the expected text:
>
		AssertFails(() => {
		    throw 'This is a silly error'
		}, 'fatal')
<
Import({path})				*libtinytest.Import()*
		Import tests from {path}.

Round({num}, {digits})			*libtinytest.Round()*
		Round the given number to the specified number of {digits}.
		For example:
>
		echo Round(4.54898, 2)  # 4.55
<
Run([{pattern}])			*libtinytest.Run()*
		Run all the tests. If {pattern} is given, run only the tests
		matching {pattern}. For instance, to run only the tests
		containing `ABC`, you may write:
>
		const success = Run('ABC')
<
		This will run `Test_ABC_Foo()` and `TestABCBar()`, but not
		`Test_XYZ()`.

Options ~
					*g:tinytest_highlight*

Flag to enable or disable syntax highlighting in the output.
>
	g:tinytest_highlight = true
<
 vim:tw=78:ts=8:noet:ft=help:norl:
