*libversion.txt*	For Vim version 9.1	Last change: 2025 May 3

Parse and compare semantic version numbers as specified by https://semver.org.
Example:
>
	vim9script
	import 'libversion.vim' as vv
	
	var v = vv.Version.Parse('1.4.6-rc.1')
	
	echo v v.major v.minor v.patch v.prerelease
<
You may also use this library to check that an imported script satisfies
a version requirement. Assuming that "somelib.vim" exposes a "version"
attribute, the following code will throw an error if somelib's version is less
than 2.0.1:
>
	vim9script
	import 'somelib.vim'
	import 'libversion.vim' as vv

	vv.Require('Some Lib', somelib.version, '2.0.1')
<

Classes ~
					*libversion.Version*

new([{major}, {minor}, {patch}[, {prerelease}, {build}])
		Create a new version object. This allows you to create
		a version by specifying each component. It is most common,
		however, to parse a version from a string using the Parse()
		method.

		{major}, {minor} and {patch} must be three integers.
		{prerelease} is a list of strings and numbers, and {build} is
		a list of strings.

major
		The major version number.

minor
		The minor version number.

patch
		The patch number.

prerelease
		The list of dot-separated prerelease identifiers.

build
		The list of dot-separated build metadata identifiers.

Compare({other})
		Compare a version with another version. {other} must be
		a |string| or a Version object. Returns -1 is this version
		precedes the other, +1 is this version follows the other, or
		0 if the versions are equal.

Equal({other})
GreaterThan({other})
GreaterThanOrEqual({other})
LessThan({other})
LessThanOrEqual({other})
		Compare a version with another version. {other} must be
		a |string| or a Version object. Returns |true| is the
		comparison holds, otherwise returns |false|.

IsRelease()
		Returns |true| if the version represents a normal release;
		returns |false| otherwise.

IsPreRelease()
		Returns |true| if the version represents a prerelease;
		returns |false| otherwise.

Parse({version})
		Parse a string into a version object. {version} is a string
		denoting a version according to the rules of semantic
		versioning.

Functions ~
					*libversion.Require()*

Require({name}, {version}, {min}[, {args}])
		Check that a version is within a given range.

		{name} is a descriptive string, used in error messages:
		typically, that is the name of the imported script. {version}
		is a string denoting a version to check. {min} is a string
		denoting the minimum valid version. {args} is an optional
		dictionary of options, which may contain the following keys:

		- "throw": a boolean flag telling whether the function should
		  throw. The default is to throw an error if the version check
		  fails. If "throw" is set to |false|, the function will
		  instead return |true| if the check is successful and |false|
		  otherwise.
		- "max": a string representing the maximum valid version.

		For example:
>
		import 'somescript.vim'

		if !Require('Some script', somescript.version,
		    '1.0.0-beta1',
		    {max: '1.2.0', throw: false})
		  finish
		endif
<
		will gracefully stop sourcing your script if somescript.vim's
		version is less than 1.0.0-beta1 or greater than 1.2.0.


 vim:tw=78:ts=8:noet:ft=help:norl:

