vim9script

import 'libtinytest.vim' as tt
import 'libcolor.vim'    as color

const TESTPATH = resolve(expand('<sfile>:p'))
const TESTFILE = fnamemodify(TESTPATH, ':t')
const TESTDIR  = fnamemodify(TESTPATH, ':h')

def Test_Color_Hex2Rgb()
  assert_equal([0, 0, 0], color.Hex2Rgb('#000000'))
  assert_equal([0, 0, 0], color.Hex2Rgb('000000'))
  assert_equal([255, 255, 255], color.Hex2Rgb('#ffffff'))
  assert_equal([255, 255, 255], color.Hex2Rgb('ffffff'))
enddef

def Test_Color_Rgb2Hex()
  assert_equal('#000000', color.Rgb2Hex(0, 0, 0))
  assert_equal('#ffffff', color.Rgb2Hex(255, 255, 255))
  assert_equal('#0b67da', call(color.Rgb2Hex, color.Hex2Rgb('#0b67da')))
enddef

# fun! Test_CT_srgb2xyz238238239()
#   let [x,y,z] = colortemplate#colorspace#srgb2xyz(238, 238, 239)
#   " Values as computed by http://colormine.org/color-converter
#   call assert_true(81.41441852841255 - s:eps < x && x < 81.41441852841255 + s:eps)
#   call assert_true(85.55820926290504 - s:eps < y && y < 85.55820926290504 + s:eps)
#   call assert_true(93.88474076133308 - s:eps < z && z < 93.88474076133308 + s:eps)
# endf
#
# fun! Test_CT_srgb2cielab238238239()
#   let [L,a,b] = colortemplate#colorspace#rgb2cielab(238, 238, 239)
#   " Values as computed by http://colormine.org/color-converter
#   call assert_true(94.12313115610355 - s:eps < L && L < 94.12313115610355 + s:eps)
#   call assert_true(0.18264247948240886 - s:eps < a && a < 0.18264247948240886 + s:eps)
#   call assert_true(-0.49221569623207895 - s:eps < b && b < -0.49221569623207895 + s:eps)
# endf
#
# fun! Test_CT_rgb2hsv()
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 0, 0)
#   call assert_equal(  0, h)
#   call assert_equal(  0, s)
#   call assert_equal(  0, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 255, 255)
#   call assert_equal(  0, h)
#   call assert_equal(  0, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(128, 128, 128)
#   call assert_equal(  0, h)
#   call assert_equal(  0, s)
#   call assert_equal( 50, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 0, 4)
#   call assert_equal(359, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 0, 0)
#   call assert_equal(  0, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 128, 0)
#   call assert_equal( 30, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 255, 0)
#   call assert_equal( 60, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(128, 255, 0)
#   call assert_equal( 90, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 255, 0)
#   call assert_equal(120, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 255, 128)
#   call assert_equal(150, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 255, 255)
#   call assert_equal(180, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 128, 255)
#   call assert_equal(210, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(0, 0, 255)
#   call assert_equal(240, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(128, 0, 255)
#   call assert_equal(270, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 0, 255)
#   call assert_equal(300, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 0, 128)
#   call assert_equal(330, h)
#   call assert_equal(100, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(1, 1, 1)
#   call assert_equal(  0, h)
#   call assert_equal(  0, s)
#   call assert_equal(  0, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(3, 3, 3)
#   call assert_equal(  0, h)
#   call assert_equal(  0, s)
#   call assert_equal(  1, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(252, 3, 7)
#   call assert_equal(359, h)
#   call assert_equal( 99, s)
#   call assert_equal( 99, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(255, 255, 254)
#   call assert_equal( 60, h)
#   call assert_equal(  0, s)
#   call assert_equal(100, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(197, 128, 63)
#   call assert_equal( 29, h)
#   call assert_equal( 68, s)
#   call assert_equal( 77, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(33, 197, 99)
#   call assert_equal(144, h)
#   call assert_equal( 83, s)
#   call assert_equal( 77, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(239, 7, 131)
#   call assert_equal(328, h)
#   call assert_equal( 97, s)
#   call assert_equal( 94, v)
#   let [h,s,v] = colortemplate#colorspace#rgb2hsv(135, 38, 39)
#   call assert_equal(359, h)
#   call assert_equal( 72, s)
#   call assert_equal( 53, v)
# endf
#
# fun! Test_CT_hsv2rgb()
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(0, 0, 0)
#   call assert_equal(  0, r)
#   call assert_equal(  0, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(0, 0, 100)
#   call assert_equal(255, r)
#   call assert_equal(255, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(300, 0, 50)
#   call assert_equal(128, r)
#   call assert_equal(128, g)
#   call assert_equal(128, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(359, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(  0, g)
#   call assert_equal(  4, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(360, 100, 100)  " 360° == 0°
#   call assert_equal(255, r)
#   call assert_equal(  0, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(30, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(128, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(60, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(255, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(90, 100, 100)
#   call assert_equal(128, r)
#   call assert_equal(255, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(120, 100, 100)
#   call assert_equal(  0, r)
#   call assert_equal(255, g)
#   call assert_equal(  0, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(150, 100, 100)
#   call assert_equal(  0, r)
#   call assert_equal(255, g)
#   call assert_equal(128, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(180, 100, 100)
#   call assert_equal(  0, r)
#   call assert_equal(255, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(210, 100, 100)
#   call assert_equal(  0, r)
#   call assert_equal(128, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(240, 100, 100)
#   call assert_equal(  0, r)
#   call assert_equal(  0, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(270, 100, 100)
#   call assert_equal(128, r)
#   call assert_equal(  0, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(300, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(  0, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(300, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(  0, g)
#   call assert_equal(255, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(330, 100, 100)
#   call assert_equal(255, r)
#   call assert_equal(  0, g)
#   call assert_equal(128, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(279, 57, 99)
#   call assert_equal(202, r)
#   call assert_equal(109, g)
#   call assert_equal(252, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(1, 1, 1)
#   call assert_equal(  3, r)
#   call assert_equal(  3, g)
#   call assert_equal(  3, b)
#   let [r,g,b] = colortemplate#colorspace#hsv2rgb(359, 99, 99)
#   call assert_equal(252, r)
#   call assert_equal(  3, g)
#   call assert_equal(  7, b)
# endf
#
# fun! Test_CT_delta_eeeeef()
#   let l:res = colortemplate#colorspace#approx('#eeeeef')
#   call assert_equal('#eeeeef', l:res['color'])
#   call assert_equal(255, l:res['index'])
#   call assert_equal('#eeeeee', l:res['approx'])
#   call assert_true(0.54422 - s:eps <= l:res['delta'] && l:res['delta'] <= 0.54422 + s:eps)
# endf
#
# fun! Test_CT_hex_delta_e()
#   let l:delta = colortemplate#colorspace#hex_delta_e('#767676', '#7c6f64')
#   call assert_true(7.889685 - s:eps < l:delta && l:delta < 7.889685 + s:eps)
# endf
#
# fun! Test_CT_colors_within()
#   let l:list = colortemplate#colorspace#colors_within(4.5, '#9e0006')
#   call assert_equal(2, len(l:list))
#   call assert_equal(88, l:list[0])
#   call assert_equal(124, l:list[1])
# endf
#
# fun! Test_CT_2_neighbours()
#   let l:list = colortemplate#colorspace#k_neighbours('#9e0006', 2)
#   call assert_equal(2, len(l:list))
#   call assert_equal(124, l:list[0]['index'])
#   call assert_equal(88, l:list[1]['index'])
# endf
#
# fun! Test_CT_contrast_ratio()
#   call assert_equal(1.0, colortemplate#colorspace#contrast_ratio([0,0,0],[0,0,0]))
#   call assert_equal(1.0, colortemplate#colorspace#contrast_ratio([255,255,255],[255,255,255]))
#   call assert_equal(1.0, colortemplate#colorspace#contrast_ratio([100,100,100],[100,100,100]))
#   call assert_equal(21.0, colortemplate#colorspace#contrast_ratio([0,0,0],[255,255,255]))
#   call assert_equal(21.0, colortemplate#colorspace#contrast_ratio([255,255,255],[0,0,0]))
#   call assert_equal(4.54, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#e1fafa'), 2))
#   call assert_equal(4.54, s:round(colortemplate#colorspace#contrast_ratio('#e1fafa', '#707070'), 2))
#   call assert_equal(4.52, s:round(colortemplate#colorspace#contrast_ratio('#fafa96', '#707070'), 2))
#   call assert_equal(4.52, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#fafa96'), 2))
#   call assert_equal(4.56, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#fafaaf'), 2))
#   call assert_equal(4.56, s:round(colortemplate#colorspace#contrast_ratio('#fafaaf', '#707070'), 2))
#   call assert_equal(4.62, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#fafac8'), 2))
#   call assert_equal(4.62, s:round(colortemplate#colorspace#contrast_ratio('#fafac8', '#707070'), 2))
#   call assert_equal(4.68, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#fafae1'), 2))
#   call assert_equal(4.68, s:round(colortemplate#colorspace#contrast_ratio('#fafae1', '#707070'), 2))
#   call assert_equal(4.74, s:round(colortemplate#colorspace#contrast_ratio('#707070', '#fafafa'), 2))
#   call assert_equal(4.74, s:round(colortemplate#colorspace#contrast_ratio('#fafafa', '#707070'), 2))
# endf
#
# fun! Test_CT_xterm2hex()
#   call assert_equal('#000000', colortemplate#colorspace#xterm256_hexvalue(16))
#   call assert_equal('#ffffff', colortemplate#colorspace#xterm256_hexvalue(231))
# endf
#
# fun! Test_CT_hex2gray()
#   call assert_equal(0, colortemplate#colorspace#hex2gray('#000000'))
#   call assert_equal(64, colortemplate#colorspace#hex2gray('#404040'))
#   call assert_equal(127, colortemplate#colorspace#hex2gray('#7f7f7F'))
#   call assert_equal(191, colortemplate#colorspace#hex2gray('#bfbfbf'))
#   call assert_equal(255, colortemplate#colorspace#hex2gray('#ffffff'))
#   call assert_equal(84, colortemplate#colorspace#hex2gray('#405952'))
#   call assert_equal(153, colortemplate#colorspace#hex2gray('#9c9b7a'))
#   call assert_equal(218, colortemplate#colorspace#hex2gray('#ffd393'))
#   call assert_equal(177, colortemplate#colorspace#hex2gray('#ff974f'))
#   call assert_equal(137, colortemplate#colorspace#hex2gray('#f54f29'))
# endf

tt.Run('_Color')

