*libreactive.txt*	For Vim version 9.1	Last change: 2025 Jan 02

Note: Vim 9.1 or later is required.

0. Basics				|libreactive-basics|
1. Transactional updates		|libreactive-transactions|
2. Cascading effects			|libreactive-effects|
3. Caching computations			|libreactive-caching|
4. Pools				|libreactive-pools|
5. Examples				|libreactive-examples|
6. Tips and tricks			|libreactive-tips|
7. API					|libreactive-api|
8. Options				|libreactive-options|

==============================================================================
0. Basics					*libreactive-basics*

This library allows you to automatically execute arbitrary code ("effects")
whenever the value of a "reactive" variable is updated. For example:
>
	vim9script
	import 'libreactive.vim' as react

	var love = react.Property.new('pizza')

	react.CreateEffect(() => {
	  echo $'I love {love.Get()}!'
	})

	love.Set('nature')
	love.Set('Vim')
<
Output:
>
	I love pizza!
	I love nature!
	I love Vim!
<
"Reactive variables" are called "properties" and they are instances of the
|libreactive.Property| class. They are basically thin wrappers around a value
of any type, which can be accessed with `Get()` and modified with `Set()`.

"Effects" are functions or lambdas that read, and possibly write, properties.
Effects are automatically bound to the properties they access, so that they
are notified of their changes. In the example above, the effect reads the
value of the `love` property: that is enough to make the effect an observer of
`love`. As such, the effect is re-executed every time the value of `love` is
updated.

The link between properties and effects is dynamic. Every time an effect is
executed, the first thing that happens is that the list of properties it
observes is cleared. Then, every property that is read during that execution
of the effect is bound to the effect again. This is best understood with an
example:
>
	vim9script
	import 'libreactive.vim' as react

	var name = react.Property.new('Jack')
	var show = react.Property.new(true)
	var count = 0

	react.CreateEffect(() => {
	  ++count

	  if show.Get()
	    echo name.Get()
	  endif
	})

	echo count       # 1 (The effect is run upon creation, echoing 'Jack')
	name.Set('Stan') # The effect is triggered, and echoes 'Stan'
	show.Set(false)  # The effect is triggered, nothing echoed
	name.Set('Roy')  # Name is updated, but the effect is not triggered
	name.Set('Gus')  # Name is updated, but the effect is not triggered
	name.Set('Lee')  # Name is udpated, but the effect is not triggered
	show.Set(true)   # The effect is triggered, and echoes 'Lee'
	echo count       # <== Overall, the effect was executed 4 times

In this example, `count` is used to keep track of how many times the effect is
run. The first thing to notice is that |libreactive.CreateEffect()| executes
its argument: since `show` is `true` at the time the effect is created, the
current value of `name` ('Jack') is echoed. As the effect has accessed both
`show` and `name`, it becomes an observer of both properties. Therefore, when
`name` is changed to 'Stan', the effect is executed again, and it is set again
to observe both properties.

Then, `show` is set to `false`. This causes the effect to be executed a third
time, but this time only `show` is read during the execution of the effect,
hence the effect starts observing only `show`. Therefore, subsequent updates
of `name` do not trigger any effect.

Eventually, `show` is set to `true` again, which triggers the effect (which
was observing `show`): since `show` is now true, the current value of `name`
is echoed, and the effect starts observing both properties again.

==============================================================================
1. Transactional updates			*libreactive-transactions*

By default, the effects observing a property are triggered immediately after
the value of that property is updated. In circumstances in which such
behaviour is undesirable, it is possible to postpone the execution of the
effects at the end of a transaction.

Consider this example:
>
	vim9script
	import 'libreactive.vim' as react

	var firstName = react.Property.new('John')
	var lastName  = react.Property.new('Doe')

	react.CreateEffect(() => {
	  echo $'{firstName.Get()} {lastName.Get()}'
	})

	firstName.Set('Jane') # <== Triggers the effect
	lastName.Set('Smith') # <== Triggers the effect again
<
The code above will echo an intermediate name 'Jane Doe'. If the intent of the
user is to update first and last names atomically, then the updates must be
wrapped into a transaction:
>
	react.Transaction(() => {
	  firstName.Set('Jane')
	  lastName.Set('Smith')
	}) # <== Effect triggered once at commit time
<
Then, only 'John Doe' and 'Jane Smith' will be echoed.

See also |libreactive.Transaction()|.

==============================================================================
2. Cascading effects				*libreactive-effects*

An effect may contain arbitrary code, including statements that update some
properties. In general, that causes other effects to be executed in cascade.
For example:
>
	vim9script
	import 'libreactive.vim' as react

	var A = react.Property.new(2)
	var B = react.Property.new(1)
	var result = -1

	react.CreateEffect(() => { # Effect 1
	  result = B.Get()
	})

	react.CreateEffect(() => { # Effect 2
	  B.Set(A.Get())
	})

	echo result # <== 2
<
Since Effect 1 becomes an observer of property `B`, when Effect 2 is executed,
it will trigger Effect 1, because Effect 2 modifies the value of property `B`.
So, the code above will actually run:
>
	result = B.Get() # result == 1
	B.Set(A.Get())   # B == 2
	result = B.Get() # result == 2
<
One should be careful not to create cycles of effects. The library implements
a heuristic to detect infinite recursion (see |libreactive.queue_size|).
This trivial example will fail:
>
	var p = react.Property.new(0)

	react.CreateEffect(() => {
	  p.Set(p.Get() + 1)
	})
<
This effect becomes an observer of `p`, but it also changes `p`, endlessly
triggering itself.

NOTE: there are no restrictions in reading or writing properties outside of
effects. The following snippet is perfectly fine:
>
	var p = react.Property.new(1)

	react.CreateEffect(() => {
	  echo $'The current value of p is {p.Get()}'
	})

	for i in range(10)
	  p.Set(p.Get() * 2)
	endfor
<
NOTE: in the limited circumstances where one does want to access the value of
a property without any side effects even within an effect, it is possible to
access the read-only `value` attribute of the property:
>
	var p = react.Property.new(0)

	react.CreateEffect(() => {
	  p.Set(p.value + 1)
	})

	echo p.Get() # 1
<
The above works and sets the value of the property to 1.

Effects are executed inside a transaction. Therefore, no matter how many
properties they change, each of their direct effects is run exactly once and
only at the end of the effect's block. Besides, the properties accessed with
Get() during the execution of an effect are guaranteed not to change within
the span of that execution (read consistency).

Effects' propagation is breadth-first: if effect E1 updates property P1, which
is observed by effects E2 and E3, then at the end of E1:

- both E2 and E3 are executed to completion, one after another;
- only then, the effects of E2 and E3 (if any) are evaluated recursively in
  a breadth-first manner.

This semantics makes it easy to reason about effects, because each effect is
treated as an atomic unit. Evaluation is done by repeatedly performing the
following three steps until all cascading effects have been executed:

1. run the current effect to completion, keeping track of each property that
   is modified by the effect;
2. for each such property, enqueue its effects in the order in which
   the properties were updated, skipping effects that are already in the
   queue;
3. pop the effect at the top of the queue, and go to step 1.

NOTE: in step 2, you should not rely on the order in which the effects
associated to a given property are enqueued.

It is worth pointing out that the algorithm above does not prevent the same
effect to be executed multiple times during the same cascading propagation
even if everything is wrapped in a transaction. For example:
>
	var p1 = react.Property.new(0)
	var p2 = react.Property.new(0)
	var result = 0

	react.CreateEffect(() => { # Effect 1
	  p1.Set(p2.Get())
	})

	react.CreateEffect(() => { # Effect 2
	  result = p1.Get()
	})

	react.Transaction(() => {
	  p1.Set(1)
	  p2.Set(2)
	})

	echo result  # 2
<
Just before the transaction commits, the current value of result is 0, the
value of p1 is 1 and the value of p2 is 2. Besides, the effects' queue
contains Effect 2 and Effect 1 (in this order).

Then, during the commit of the transaction, Effect 2 is popped from the queue
first and executed, which sets result to 1. Then, Effect 1 is popped from the
queue and executed, which sets p1 to 2. At this point, Effect 2 is pushed into
the queue again, because p1 has been updated. Therefore, at commit time,
Effect 2 is executed twice and the final result is 2.

If you are now wondering whether two properties can track each other so that
when one changes the other is automatically updated, the answer is they can:
see |libreactive-tips| (or, better, try doing that yourself!).

						*libreactive-nested-effects*

Effects by default can be nested—that is, an effect may create another effect
or call a function or method that does it.

Nested effects must be managed carefully, because they may result in an
uncontrolled growth of function calls or even infinite loops. If effect E1
calls a function that creates an effect E2 then every time E1 is executed
a new instance of E2 is created. So, each time a dependency of E2 is updated,
E2 is executed many times, one for each copy that has been created by E1. This
may not be what one wants.

Forbidding nested effects, however, may be limiting in some circumstances. For
instance, this class creates an effect every time it is instantiated:
>
	class Foo
	  var p: react.Property

	  def new(this.p)
	    react.CreateEffect(() => {
	      echo $'Instance has value {this.p.Get()}'
	    })
	  enddef
	endclass
<
In this case, it is expected for the effect created by `new()` to be called
once for each instance. If nesting were not allowed it would not be possible
to create instances of `Foo` within the scope of another effect.

During development or for debugging purposes it may be useful to know if and
when nested effects are created. You may set |libreactive.debug| to |true| to
log such information into the message history.

==============================================================================
3. Caching computations				*libreactive-caching*

Sometimes, an effect performs an expensive computation, and it would be
wasteful to redo the computation if the properties observed by the effect have
not changed. For example, this is inefficient:
>
	vim9script
	import 'libreactive.vim' as react

	var p = react.Property.new(0.0)

	def F(): float
	  echo 'Executing F()...'
	  sleep 3 # Simulate some expensive computation that depends on p
	  return cos(p.Get())
	enddef

	react.CreateEffect(() => {
	  echo $'Effect 1: {F()}'
	})

	react.CreateEffect(() => {
	  echo $'Effect 2: {F()}'
	})

	p.Set(1.23)
<
In the code above, F() is executed four times: twice when Effect 1 and Effect
2 are created, and two more times when `p` is updated (once for each effect).

In such cases, it is convenient to cache the result of the expensive function.
This can be done by using |libreactive.CreateMemo()|, which takes as input
a function or lambda F whose current value is computed and stored inside
a property automatically instantiated by CreateMemo(), which then returns
a reference to the property's Get() method. The cached result is automatically
recomputed whenever the properties on which F depends are updated.

The example above can be rewritten as follows:
>
	vim9script
	import 'libreactive.vim' as react

	var p = react.Property.new(0.0)

	def F(): float
	  echo 'Executing F()...'
	  sleep 3 # Simulate some expensive computation that depends on p
	  return cos(p.Get())
	enddef

	var CachedF = react.CreateMemo(F)

	react.CreateEffect(() => {
	  echo $'Effect 1: {CachedF()}'
	})

	react.CreateEffect(() => {
	  echo $'Effect 2: {CachedF()}'
	})

	p.Set(1.3)
<
Now, F() is executed only if necessary: once when the memo is created (to
cache the initial value of F for p equal to 0.0) and once more when `p` is
updated (to compute the updated value of F for p equal to 1.3). The function
F is not executed when Effect 1 and Effect 2 are run: those effects just
retrieve the cached value from the memo property.

==============================================================================
4. Pools					*libreactive-pools*

So far we have talked about creating properties that trigger some effects. In
practice, one will also want to stop properties to trigger effects.

That is done by calling the Clear() method of |libreactive.Property()|, which
unsubscribes all the effects that are currently observing the affected
property.

Let us see why sometimes it is necessary to clear the properties. The
following script defines a :Foo command that creates an effect and prints
a string representation of a property, which also shows the associated
effects:
>
	vim9script
	import 'libreactive.vim' as react

	var p0 = react.Property.new(0)

	def Foo()
	  react.CreateEffect(() => {
	    p0.Get()
	  })

	  echo p0.String()
	enddef

	command! -nargs=0 Foo Foo()
<
If you execute :Foo multiple times, you will see that each time a new "phantom
effect" (executing the same lambda) is added to the property's observers. If
the value of the property is updated, the same code will be run multiple
times. This is in general not what one wants. Clearing the property before
recreating the effect fixes the issue:
>
	def Foo()
	  p0.Clear()
	  react.CreateEffect(() => {
	    p0.Get()
	  })
	enddef
<
When there are many properties, clearing each and every one may become a bit
tedious. For that reason, the constructor of |libreactive.Property()| takes an
optional argument of type |List|, which can be used to store references to the
properties created by your script. Such list is called a "pool". If the
constructor is provided with a pool, it will add the new property to that
pool.

A pool allows you to quickly iterate over all the properties in your script.
For example:
>
	vim9script
	import 'libreactive.vim' as react

	# Define a pool:
	var pool: list<react.Property> = []

	# New properties are added to the pool:
	var p0 = react.Property.new(0, pool)
	var p1 = react.Property.new(1, pool)

	react.CreateEffect(() => {
	  p0.Get()
	  p1.Get()
	})

	# Inspect the value and effects of each property
	echo mapnew(pool, (_, p: react.Property) => p.String())

	# Clear all the effects
	for property in pool
	  property.Clear()
	endfor

	# Check that the effects have been cleared
	echo mapnew(pool, (_, p: react.Property) => p.String())
<
The pool is under the complete control of your script: you may use it in any
way you want.

==============================================================================
5. Examples					*libreactive-examples*

An obvious application of libreactive is to support interactive UIs in Vim,
such as interactive popup windows or palettes. A straightforward way to
achieve that is with a rendering loop. Example:
>
	vim9script
	import 'libreactive.vim' as react

	var n = 0  # Counts how many times the UI is redrawn

	# Internal state:
	var pool: list<react.Property> = []
	var cmd    = react.Property.new('', pool)
	var animal = react.Property.new('', pool)
	var plant  = react.Property.new('', pool)

	def InitProperties()
	  for property in pool
	    property.Clear()
	  endfor

	  cmd.Set('')
	  animal.Set('-')
	  plant.Set('-')
	enddef

	def InitEffects()
	  react.CreateEffect(() => {
	    if cmd.Get() == 'f'
	      animal.Set('🦊')
	    elseif cmd.Get() == 'p'
	      animal.Set('🐼')
	    endif
	  })

	  react.CreateEffect(() => {
	    if cmd.Get() == 'f'
	      plant.Set('🍀')
	    elseif cmd.Get() == 'r'
	      plant.Set('💐')
	    endif
	  })
	enddef

	def View(): list<string>
	  ++n
	  return [animal.Get() .. $' ({n})', plant.Get() .. $' ({n})']
	enddef

	def RenderingLoop(winID: number, key: string): bool
	  if key == 'q'
	    popup_close(winID)
	  else
	    cmd.Set(key) # React to action by updating the internal state
	    popup_settext(winID, View()) # Rebuild the view and update the UI
	  endif
	  return true
	enddef

	def Main()
	  n = 0
	  InitProperties()
	  InitEffects()
	  const winID = popup_create(
	    View(), {close: 'click', filter: RenderingLoop}
	  )
	enddef

	command! -nargs=0 RunBabyRun Main()
>
In the previous, somewhat contrived, example, changing the state and updating
the UI are two clearly distinct steps, executed one after another. The whole
popup is updated exactly once for each event (in this case, for each key
press): even the parts of the UI that do not change are redrawn. That is
apparent by looking at the counter next to each emoji (the counter is not to
be considered part of the internal state: it exists only to make it apparent
when the popup is redrawn).

A simple interactive popup like the above can be easily built without
libreactive (try simplifying the script above by getting rid of libreactive!).
The benefits of using libreactive manifest themselves when the complexity
increases, there are cascading effects or efficiency can be improved by
caching computations.

Another possibility is to perform the rendering as part of one or more
effects. This is more complex, but provides finer control, than the previous
approach. It works best when the rendering is granular, that is, only the
parts of the UI that need to be updated are redrawn (with the limitation that
the unit of update of a popup is a full line). Example:
>
	vim9script
	import 'libreactive.vim' as react

	var pool: list<react.Property> = []
	var cmd    = react.Property.new('', pool)
	var animal = react.Property.new('', pool)
	var plant  = react.Property.new('', pool)

	def InitProperties()
	  for property in pool
	    property.Clear()
	  endfor

	  cmd.Set('')
	  animal.Set('-')
	  plant.Set('-')
	enddef

	def InitEffects(winID: number)
	  var bufnr = winbufnr(winID)
	  var m = 0  # Counts how many times the first line is updated
	  var n = 0  # Counts how many times the second line is updated

	  # State manipulation:

	  react.CreateEffect(() => {
	    if cmd.Get() == 'f'
	      animal.Set('🦊')
	    elseif cmd.Get() == 'p'
	      animal.Set('🐼')
	    endif
	  })

	  react.CreateEffect(() => {
	    if cmd.Get() == 'f'
	      plant.Set('🍀')
	    elseif cmd.Get() == 'r'
	      plant.Set('💐')
	    endif
	  })

	  # UI effects:

	  react.CreateEffect(() => {
	    if cmd.Get() == 'q'
	      popup_close(winID)
	    endif
	  })

	  react.CreateEffect(() => {
	    ++m
	    setbufline(bufnr, 1, animal.Get() .. $' ({m})')
	  })

	  react.CreateEffect(() => {
	    ++n
	    setbufline(bufnr, 2, plant.Get() .. $' ({n})')
	  })
	enddef

	# Update the state and render the parts of the UI needing an update
	def Filter(winID: number, key: string): bool
	  cmd.Set(key, true) 
	  return true
	enddef

	def Main()
	  const winID = popup_create('', {close: 'click', filter: Filter})
	  InitProperties()
	  InitEffects(winID)
	enddef

	command! -nargs=0 RunBabyRun Main()
<
Again, the same popup could be created without libreactive, but you would need
to manually keep track of what must be updated when. For moderately complex
UIs, that may quickly become difficult and prone to errors.

Of course, libreactive is not limited to building popups, and its use is not
limited to the two techniques described above. Be creative!

==============================================================================
6. Tips and tricks				*libreactive-tips*

- Properties may contain collections such as lists or dictionaries. Some care
  is needed to manipulate them, though, because such values are returned by
  reference by `Property.Get()`. Effects by default are triggered only if the
  property value changes, but changing a value obtained by reference will also
  update the value stored inside the property (because it is the same object).
  Hence, when `Property.Set()` is invoked, the method will not detect any
  change and will not trigger any effect.

  This is not problematic:
>
	var p0 = react.Property.new([])
	var newValue = ['a'] # Another list
	p0.Set(newValue) # Will trigger effects
<
  Here, `newValue` is a different object than the stored property value. But
  the following will NOT trigger any effect:
>
	var p0 = react.Property.new([])
	var newValue = p0.Get()
	assert_true(newValue is p0.Get()) # true
	newValue->add('a') # Also updates p0's value
	p0.Set(newValue) # No change detected, no effects triggered
<
  The correct way to update a collection property is to force the update:
>
	p0.Set(newValue, true)
<
  The optional argument of `Property.Set()`, when set to |true|, forces the
  effects associated to the property to be executed unconditionally.

  Note: using lambdas to wrap collections, as is done in other languages, in
  general does not work with libreactive, because Vim treats different
  closures as equal if they correspond to the same syntactic definition:
>
	def MakeLambda(x: list<string>): func(): list<string>
	  return () => x
	enddef

	const F0 = MakeLambda(['a'])
	const F1 = MakeLambda(['b'])
	
	echo F0 == F1 # true
<
  Therefore, the following will not work without forcing the update as
  explained above (at which point, one may just use a list):
>
	var p0 = react.Property.new(MakeLambda([]))
	var newValue: list<string> = p0.Get()()
	newValue->add('a')
	p0.Set(MakeLambda(newValue)) # No effects triggered
<
- If you prefer a functional syntax for properties, you may create them with
  the following small helper function:
>
	def GetSet(
	  value: any, pool: list<react.Property> = null_list
	): list<func>
	  var p = react.Property.new(value, pool)
	  return [p.Get, p.Set]
	enddef

	var [P1, SetP1] = GetSet(42)
<
  Then, you may access the value of the property with `P1()` and set it with
  `SetP1()`.

- It is easy to keep two or more properties in sync. Let's say that your
  script has the following invariant: "p2 is always twice as p1". This can be
  enforced as follows:
>
	# The invariant holds to begin with
	var p1 = react.Property.new(1.0)
	var p2 = react.Property.new(2.0)

	react.CreateEffect(() => {
	  p1.Set(p2.Get() / 2.0)
	})

	react.CreateEffect(() => {
	  p2.Set(p1.Get() * 2.0)
	})

	p1.Set(5.0) # Sets p1 to 5.0 and p2 to 10.0
	p2.Set(p1.Get() * 5) # Sets p2 to 25.0, p1 to 12.5
<
  This does not go into an infinite loop because if Set() does not actually
  change the current value of the property, the property's effects are not
  triggered by default.

- Always assign a value to your properties at declaration time. Thet is,
  instead of doing this:
>
	var p0 = react.Property.new() # Initial value is null

	def F()
	  p0.Set('some value')
	enddef
<
  do this:
 >
	var p0 = react.Property.new('') # Initial value of type string

	def F()
	  p0.Set('some value')
	enddef
<
  The reason is that the latter will help detecting type mismatch errors. If
  you write this by mistake:
 >
	var p0 = react.Property.new('')

	def F()
	  p0.Set(0)
	enddef
<
  an error will be raised when `F()` is executed.

- If you think you need to read and write the same property inside an effect,
  you are probably doing it wrong: rethink about your problem. An exception
  may be collection properties, because most often the new value is obtained
  by adding elements to or removing elements from the current value. which you
  must read from the property but without side effects.

- Always define a pool in your scripts and clear all your properties in the
  initialization step of your script. This will avoid the "phantom effect"
  described in |libreactive-pools|.

- Prefer |libreactive.Transaction()| to |libreactive.Begin()| and
  |libreactive.Commit()|. The latter two are useful in limited circumstances,
  e.g., when one needs to wrap in a transaction a call to a base class method,
  prefixed with "super.", because the call using super cannot appear within
  a lambda (|E1356|).

==============================================================================
7. API					*libreactive-api*

Classes ~
					*libreactive.Property()*
new([{value}, {pool}])
		Create a new property with the given {value}. {value} can be
		of any type. If no value is provided, the property is
		initialized with |null|.

		If {pool} is provided, it must be a |List| of Properties. The
		new property is added to {pool} by the constructor.

value
		The read-only value of the property. Accessing this does not
		trigger any effects. You should prefer Get() in most
		circumstances.

Get()
		Obtain the value of the property. If this method is called
		inside an effect's block, that effect is automatically
		registered as an observer of the property.

Set({value}[, {force}])
		Update the value of the property and execute all the effects
		currently associated with this property, if any. The effects
		are executed immediately unless the update is performed within
		a transaction or within an effect, in which case the effects
		are run only at the end of the transaction or at the end of
		the effect's block, respectively.

		By default, the effects are triggered only if the new value of
		the property is different from the current value (where == is
		used for the comparison). When {force} is |true|, though, the
		effects are always executed, even if the update does not
		change the value of the property.

Clear()
		Un-register all the effects currently observing this property.
		After this, updating this property will not trigger any effect
		until the property is read again by some effect.

Effects()
		Return the names of the effects currently observing this
		property as a |List| of |String|s. Mainly useful for debugging.

String()
		Return a |String| representation of this property. The string
		has the form '<value> {<effects>}', where <value> is the
		current value of the property, and <effects> is the list of
		functions or lambdas that are the current effects of this
		property. Each effect is prefix with E<n>:, where <n> is
		a number uniquely identifying each effect, so that it is
		possible to distinguish distinct effect instances that execute
		the same function or lambda.

Functions ~

					*libreactive.Begin()*
Begin()
		Start a transaction. This must always be paired with
		|libreactive.Commit()|.
		In most cases, |libreactive.Transaction()| is preferrable.

					*libreactive.Commit()*
Commit()
		Commit a transaction. This must always be paired with
		|libreactive.Begin()|.
		In most cases, |libreactive.Transaction()| is preferrable.

					*libreactive.CreateEffect()*
CreateEffect({func})
		Create a new effect running {func} and execute it once. {func}
		must be a function with no parameters and no return value.

		Effects by default cannot be nested: that results in a runtime
		error. To allow nested effects, set
		|libreactive.nested_effects| to |true|.

					*libreactive.CreateMemo()*
CreateMemo({func}[, {pool}])
		Create an effect that executes {func} and caches its result
		into a property. The property is created by CreateMemo().
		{func} must be a function with no parameters and an arbitrary
		return value. The function's value is automatically
		recomputed—and its result cached—whenever any property which
		the function depends upon is updated.

		If {pool} is provided, it must be a |List| of Properties. The
		property created by this function is appended to {pool}.

		Returns a reference to the property's Get() method.

					*libreactive.Transaction()*
Transaction({func})
		Execute {func} atomically: any property updates performed by
		{func} trigger their direct effects only once and only at the
		end of the transaction.

		Note: transactions may be nested.

==============================================================================
8. Options				*libreactive-options*

For each of the following script variables, a global setting of the form
`g:libreactive_<variable>` can also be defined. Script variables can be set
anywhere in your scripts. Global variables have an effect only if they are
defined before sourcing the library.

					*libreactive.debug_level*

Set the debug level:

  - `0`: no logging;
  - `1`: echo and log debugging information to the |message-history|.
>
	libreactive.debug_level = 0
<
					*libreactive.queue_size*

The maximum size of the internal effects' queue. This value should be
increased only if libreactive emits false positive errors about the recursion
limit being exceeded. (But then, how many effects do your properties have?!)
>
	libreactive.queue_size = 10000
<
 vim:tw=78:ts=8:noet:ft=help:norl:
