vim9script

import './colorscheme.vim'
import './version.vim'
import 'librelalg.vim' as ra

# Aliases {{{
const AntiJoin             = ra.AntiJoin
const Avg                  = ra.Avg
const AvgBy                = ra.AvgBy
const Bool                 = ra.Bool
const Build                = ra.Build
const CoddDivide           = ra.CoddDivide
const Count                = ra.Count
const CountBy              = ra.CountBy
const CountDistinct        = ra.CountDistinct
const Divide               = ra.Divide
const Extend               = ra.Extend
const EquiJoin             = ra.EquiJoin
const EquiJoinPred         = ra.EquiJoinPred
const Filter               = ra.Filter
const Float                = ra.Float
const ForeignKey           = ra.ForeignKey
const Frame                = ra.Frame
const From                 = ra.From
const GroupBy              = ra.GroupBy
const Int                  = ra.Int
const Intersect            = ra.Intersect
const Join                 = ra.Join
const LeftNatJoin          = ra.LeftNatJoin
const ListAgg              = ra.ListAgg
const Max                  = ra.Max
const MaxBy                = ra.MaxBy
const Min                  = ra.Min
const MinBy                = ra.MinBy
const Minus                = ra.Minus
const NatJoin              = ra.NatJoin
const NotIn                = ra.NotIn
const Product              = ra.Product
const Project              = ra.Project
const Query                = ra.Query
const Rel                  = ra.Rel
const RelEq                = ra.RelEq
const Rename               = ra.Rename
const Select               = ra.Select
const SemiJoin             = ra.SemiJoin
const Sort                 = ra.Sort
const SortBy               = ra.SortBy
const Str                  = ra.Str
const StringAgg            = ra.StringAgg
const Sum                  = ra.Sum
const SumBy                = ra.SumBy
const Table                = ra.Table
const Transform            = ra.Transform
const Union                = ra.Union
const Zip                  = ra.Zip
# }}}

const VERSION  = version.VERSION
const Database = colorscheme.Database
const Metadata = colorscheme.Metadata

# Helper functions {{{
def In(item: string, collection: list<string>): bool
  return index(collection, item) != -1
enddef
# }}}

# Integrity checks {{{
def CheckMetadata(meta: Metadata)
  if empty(meta.fullname)
    throw 'Please define the full name of the color scheme'
  endif

  if empty(meta.shortname)
    throw 'Please define the short name of the color scheme'
  endif

  if empty(meta.author)
    throw 'Please define the author of the color scheme'
  endif
enddef

def CheckMissingGroups(db: Database)
  const missing = Query(
    db.HighlightGroup->AntiJoin(db.HiGroupVersion,
                                (t, u) => t.HiGroupName == u.HiGroupName)
  )

  if !empty(missing)
    const names = missing->Transform((t) => t.HiGroupName)
    echomsg printf(
      "Missing %s definitions for %s", db.background, join(names, ', ')
    )
  endif
enddef

def CheckMissingDefaultDefinitions(db: Database)
  const missingDefault = Query(
    db.HiGroupVersion->AntiJoin((db.HiGroupVersion->Select((t): bool => t.IsDefault)),
                                (t, u) => t.HiGroupName == u.HiGroupName)
  )

  if !empty(missingDefault)
    const names = missingDefault->Transform((t) => t.HiGroupName)
    throw printf(
      "Missing %s default definition for %s", db.background, join(names, ', ')
    )
  endif
enddef
# }}}

# Header {{{
def AddMeta(header: list<string>, text: string, value: string): list<string>
  if !empty(value)
    header->add(printf(text, value))
  endif

  return header
enddef

def AddList(header: list<string>, text: string, items: list<string>): list<string>
  if !empty(items)
    header->AddMeta(text, items[0])

    const n = len(items)
    const spaces = repeat(' ', len(text) - 3)
    var i = 1
    while i < n
      header->add(printf('#%s%s', spaces, items[i]))
      ++i
    endwhile
  endif

  return header
enddef

def Header(meta: Metadata): list<string>
  # const authors     = join(meta.author, ', ')
  # const maintainers = join(meta.maintainer, ', ')
  const license     = empty(meta.license) ? 'Vim License (see `:help license`)' : meta.license
  var   header      = ['vim9script', '']

  header->AddMeta('# Name:           %s', meta.fullname)
  header->AddMeta('# Version:        %s', meta.version)
  header->AddList('# Description:    %s', meta.description)
  header->AddList('# Author(s):      %s', meta.author)
  header->AddList('# Maintainers(s): %s', meta.maintainer)
  header->AddMeta('# URL:            %s', meta.url)
  header->AddMeta('# Website:        %s', meta.website)
  header->AddMeta('# License:        %s', meta.license)
  header->AddMeta('# Last Updated:   %s', strftime("%c"))
  header->add('')
  header->AddMeta('# Generated by Colortemplate v%s', VERSION)
  header->add('')

  if !meta.backgrounds.light
    header->add('set background=dark')->add('')
  elseif !meta.backgrounds.dark
    header->add('set background=light')->add('')
  endif

  header->add('hi clear')
  header->AddMeta("g:colors_name = '%s'", meta.shortname)->add('')
  header->add("const t_Co = exists('&t_Co') && !has('gui_running') ? (&t_Co ?? 0) : -1")

  return header
enddef
# }}}

# Variant generation {{{

const HiGroupKey = EquiJoinPred(['HiGroupName', 'Variant', 'DiscrValue'])

def Variant(db: Database, variant: string): dict<list<dict<any>>>
  const linkedGroups = Query(
    db.LinkedGroup
    ->Select((t) => t.Variant == variant)
  )

  const baseGroups = Query(
    db.BaseGroup
    ->Select((t) => t.Variant == variant)

    ->LeftNatJoin(
      db.ColorAttribute
      ->NatJoin(db.ColorVariant)
      ->Extend((t): dict<any> => {
        return {ColorAttrs: t.ColorKey .. '=' .. t.ColorValue}
      })->GroupBy(['HiGroupName', 'Variant', 'DiscrValue'],
                  StringAgg('ColorAttrs', ' ', ''), 'ColorAttrs'),
      [{ColorAttrs: ''}])

    ->LeftNatJoin(
      db.Attribute->Extend((t): dict<any> => {
        return {StyleAttrs: t.AttrKey .. '=' .. t.AttrValue}
      })->GroupBy(['HiGroupName', 'Variant', 'DiscrValue'],
                  StringAgg('StyleAttrs', ' ', ''), 'StyleAttrs'),
      [{StyleAttrs: ''}])
  )

  return {'linked': linkedGroups, 'base': baseGroups}
enddef
# }}}

# Main {{{
export def Generate(meta: Metadata, dbase: dict<Database>): list<string>
  CheckMetadata(meta)

  for [bg, dbValue] in items(dbase)
    if meta.backgrounds[bg]
      const db: Database = dbValue
      CheckMissingGroups(db)
      CheckMissingDefaultDefinitions(db)
    endif
  endfor

  var   theme    = Header(meta)
  const variants = meta.variants

  var darkGuiVariant = Variant(dbase['dark'], 'gui')
  popup_create(split(Table(darkGuiVariant['base']), "\n"),
    {drag: true, dragall: true, close: "button", border: [1, 1, 1, 1]})

  for variant in meta.variants
    # TODO: generate variant
  endfor

  return theme
enddef
# }}}

# vim: foldmethod=marker nowrap et ts=2 sw=2
